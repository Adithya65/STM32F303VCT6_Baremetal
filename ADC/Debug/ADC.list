
ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000360  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004f4  080004fc  000104fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004f4  080004f4  000104fc  2**0
                  CONTENTS
  4 .ARM          00000000  080004f4  080004f4  000104fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004f4  080004fc  000104fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004f4  080004f4  000104f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080004f8  080004f8  000104f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000104fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000104fc  2**0
                  CONTENTS
 10 .bss          0000004c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000004c  2000004c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000104fc  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0001052c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00000264  00000000  00000000  0001056f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000010c  00000000  00000000  000107d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000068  00000000  00000000  000108e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000045  00000000  00000000  00010948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00000f62  00000000  00000000  0001098d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000004ff  00000000  00000000  000118ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00003c43  00000000  00000000  00011dee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000000ec  00000000  00000000  00015a34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005a  00000000  00000000  00015b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080004dc 	.word	0x080004dc

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	080004dc 	.word	0x080004dc

080001d4 <setbit>:
void setbit(uint32_t *val,uint32_t pos);
void setbit(uint32_t *val,uint32_t pos);
void togglebit(uint32_t *val,uint32_t pos);

void setbit(uint32_t *val,uint32_t pos)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
 80001dc:	6039      	str	r1, [r7, #0]
	*val=*val|(1<<pos);
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	2101      	movs	r1, #1
 80001e4:	683a      	ldr	r2, [r7, #0]
 80001e6:	fa01 f202 	lsl.w	r2, r1, r2
 80001ea:	431a      	orrs	r2, r3
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	601a      	str	r2, [r3, #0]

}
 80001f0:	bf00      	nop
 80001f2:	370c      	adds	r7, #12
 80001f4:	46bd      	mov	sp, r7
 80001f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fa:	4770      	bx	lr

080001fc <clearbit>:
void clearbit(uint32_t *val,uint32_t pos)
{
 80001fc:	b480      	push	{r7}
 80001fe:	b083      	sub	sp, #12
 8000200:	af00      	add	r7, sp, #0
 8000202:	6078      	str	r0, [r7, #4]
 8000204:	6039      	str	r1, [r7, #0]
	*val=*val&~(1<<pos);
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	2101      	movs	r1, #1
 800020c:	683a      	ldr	r2, [r7, #0]
 800020e:	fa01 f202 	lsl.w	r2, r1, r2
 8000212:	43d2      	mvns	r2, r2
 8000214:	401a      	ands	r2, r3
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	601a      	str	r2, [r3, #0]

}
 800021a:	bf00      	nop
 800021c:	370c      	adds	r7, #12
 800021e:	46bd      	mov	sp, r7
 8000220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000224:	4770      	bx	lr
	...

08000228 <main>:
#endif
uint32_t *AHBENR,*ADC_BASE,*ADC_IER,*ADC_CR,*ADC_CFGR,*PB,*RCC_AHBENR,*ADC_SQR1,*ADC_DR,*ADC_CCR,*NVIC_ISER0,*led ;
int i;

int main(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	af00      	add	r7, sp, #0
	uint16_t adcval;

	AHBENR=(uint32_t *)0x40021014;
 800022c:	4b6b      	ldr	r3, [pc, #428]	; (80003dc <main+0x1b4>)
 800022e:	4a6c      	ldr	r2, [pc, #432]	; (80003e0 <main+0x1b8>)
 8000230:	601a      	str	r2, [r3, #0]
	led=(uint32_t *)0x48001000;
 8000232:	4b6c      	ldr	r3, [pc, #432]	; (80003e4 <main+0x1bc>)
 8000234:	4a6c      	ldr	r2, [pc, #432]	; (80003e8 <main+0x1c0>)
 8000236:	601a      	str	r2, [r3, #0]

	setbit(AHBENR,28);
 8000238:	4b68      	ldr	r3, [pc, #416]	; (80003dc <main+0x1b4>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	211c      	movs	r1, #28
 800023e:	4618      	mov	r0, r3
 8000240:	f7ff ffc8 	bl	80001d4 <setbit>
	setbit(AHBENR,17);
 8000244:	4b65      	ldr	r3, [pc, #404]	; (80003dc <main+0x1b4>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	2111      	movs	r1, #17
 800024a:	4618      	mov	r0, r3
 800024c:	f7ff ffc2 	bl	80001d4 <setbit>
	setbit(AHBENR,21);
 8000250:	4b62      	ldr	r3, [pc, #392]	; (80003dc <main+0x1b4>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	2115      	movs	r1, #21
 8000256:	4618      	mov	r0, r3
 8000258:	f7ff ffbc 	bl	80001d4 <setbit>
	ADC_SQR1=(uint32_t)ADC_BASE+0x30;
 800025c:	4b63      	ldr	r3, [pc, #396]	; (80003ec <main+0x1c4>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	3330      	adds	r3, #48	; 0x30
 8000262:	461a      	mov	r2, r3
 8000264:	4b62      	ldr	r3, [pc, #392]	; (80003f0 <main+0x1c8>)
 8000266:	601a      	str	r2, [r3, #0]
	setbit(led,30);
 8000268:	4b5e      	ldr	r3, [pc, #376]	; (80003e4 <main+0x1bc>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	211e      	movs	r1, #30
 800026e:	4618      	mov	r0, r3
 8000270:	f7ff ffb0 	bl	80001d4 <setbit>
	ADC_BASE=(uint32_t *)0x50000000;
 8000274:	4b5d      	ldr	r3, [pc, #372]	; (80003ec <main+0x1c4>)
 8000276:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800027a:	601a      	str	r2, [r3, #0]
	ADC_IER=(uint32_t)ADC_BASE+0x04;
 800027c:	4b5b      	ldr	r3, [pc, #364]	; (80003ec <main+0x1c4>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	3304      	adds	r3, #4
 8000282:	461a      	mov	r2, r3
 8000284:	4b5b      	ldr	r3, [pc, #364]	; (80003f4 <main+0x1cc>)
 8000286:	601a      	str	r2, [r3, #0]
	ADC_CR=(uint32_t)ADC_BASE+0x08;
 8000288:	4b58      	ldr	r3, [pc, #352]	; (80003ec <main+0x1c4>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	3308      	adds	r3, #8
 800028e:	461a      	mov	r2, r3
 8000290:	4b59      	ldr	r3, [pc, #356]	; (80003f8 <main+0x1d0>)
 8000292:	601a      	str	r2, [r3, #0]
	ADC_CCR=(uint32_t *)0x50000308;
 8000294:	4b59      	ldr	r3, [pc, #356]	; (80003fc <main+0x1d4>)
 8000296:	4a5a      	ldr	r2, [pc, #360]	; (8000400 <main+0x1d8>)
 8000298:	601a      	str	r2, [r3, #0]
	ADC_DR=(uint32_t)ADC_BASE+0x40;
 800029a:	4b54      	ldr	r3, [pc, #336]	; (80003ec <main+0x1c4>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	3340      	adds	r3, #64	; 0x40
 80002a0:	461a      	mov	r2, r3
 80002a2:	4b58      	ldr	r3, [pc, #352]	; (8000404 <main+0x1dc>)
 80002a4:	601a      	str	r2, [r3, #0]
	ADC_SQR1=(uint32_t)ADC_BASE + 0x30;
 80002a6:	4b51      	ldr	r3, [pc, #324]	; (80003ec <main+0x1c4>)
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	3330      	adds	r3, #48	; 0x30
 80002ac:	461a      	mov	r2, r3
 80002ae:	4b50      	ldr	r3, [pc, #320]	; (80003f0 <main+0x1c8>)
 80002b0:	601a      	str	r2, [r3, #0]
	setbit(ADC_CCR,17);//m
 80002b2:	4b52      	ldr	r3, [pc, #328]	; (80003fc <main+0x1d4>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	2111      	movs	r1, #17
 80002b8:	4618      	mov	r0, r3
 80002ba:	f7ff ff8b 	bl	80001d4 <setbit>
	setbit(ADC_CR,0);
 80002be:	4b4e      	ldr	r3, [pc, #312]	; (80003f8 <main+0x1d0>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	2100      	movs	r1, #0
 80002c4:	4618      	mov	r0, r3
 80002c6:	f7ff ff85 	bl	80001d4 <setbit>
	PB=(uint32_t * )0x48000000;
 80002ca:	4b4f      	ldr	r3, [pc, #316]	; (8000408 <main+0x1e0>)
 80002cc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002d0:	601a      	str	r2, [r3, #0]
	setbit(PB,0);
 80002d2:	4b4d      	ldr	r3, [pc, #308]	; (8000408 <main+0x1e0>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	2100      	movs	r1, #0
 80002d8:	4618      	mov	r0, r3
 80002da:	f7ff ff7b 	bl	80001d4 <setbit>
	setbit(PB,1);
 80002de:	4b4a      	ldr	r3, [pc, #296]	; (8000408 <main+0x1e0>)
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	2101      	movs	r1, #1
 80002e4:	4618      	mov	r0, r3
 80002e6:	f7ff ff75 	bl	80001d4 <setbit>
	setbit(ADC_CR,31);
 80002ea:	4b43      	ldr	r3, [pc, #268]	; (80003f8 <main+0x1d0>)
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	211f      	movs	r1, #31
 80002f0:	4618      	mov	r0, r3
 80002f2:	f7ff ff6f 	bl	80001d4 <setbit>
	setbit(ADC_IER,2);
 80002f6:	4b3f      	ldr	r3, [pc, #252]	; (80003f4 <main+0x1cc>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	2102      	movs	r1, #2
 80002fc:	4618      	mov	r0, r3
 80002fe:	f7ff ff69 	bl	80001d4 <setbit>

	//setbit(ADC_IER,2);

	 NVIC_ISER0=(uint32_t*)0xE000E100;
 8000302:	4b42      	ldr	r3, [pc, #264]	; (800040c <main+0x1e4>)
 8000304:	4a42      	ldr	r2, [pc, #264]	; (8000410 <main+0x1e8>)
 8000306:	601a      	str	r2, [r3, #0]
	setbit(NVIC_ISER0,18);
 8000308:	4b40      	ldr	r3, [pc, #256]	; (800040c <main+0x1e4>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	2112      	movs	r1, #18
 800030e:	4618      	mov	r0, r3
 8000310:	f7ff ff60 	bl	80001d4 <setbit>
	//clearbit(ADC,0);
	setbit(ADC_CR,31);
 8000314:	4b38      	ldr	r3, [pc, #224]	; (80003f8 <main+0x1d0>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	211f      	movs	r1, #31
 800031a:	4618      	mov	r0, r3
 800031c:	f7ff ff5a 	bl	80001d4 <setbit>
	clearbit(ADC_CR,28);
 8000320:	4b35      	ldr	r3, [pc, #212]	; (80003f8 <main+0x1d0>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	211c      	movs	r1, #28
 8000326:	4618      	mov	r0, r3
 8000328:	f7ff ff68 	bl	80001fc <clearbit>
	clearbit(ADC_CR,29);
 800032c:	4b32      	ldr	r3, [pc, #200]	; (80003f8 <main+0x1d0>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	211d      	movs	r1, #29
 8000332:	4618      	mov	r0, r3
 8000334:	f7ff ff62 	bl	80001fc <clearbit>

	setbit(ADC_CR,28);
 8000338:	4b2f      	ldr	r3, [pc, #188]	; (80003f8 <main+0x1d0>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	211c      	movs	r1, #28
 800033e:	4618      	mov	r0, r3
 8000340:	f7ff ff48 	bl	80001d4 <setbit>
	setbit(ADC_CR,31);
 8000344:	4b2c      	ldr	r3, [pc, #176]	; (80003f8 <main+0x1d0>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	211f      	movs	r1, #31
 800034a:	4618      	mov	r0, r3
 800034c:	f7ff ff42 	bl	80001d4 <setbit>
	clearbit(ADC_CR,29);
 8000350:	4b29      	ldr	r3, [pc, #164]	; (80003f8 <main+0x1d0>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	211d      	movs	r1, #29
 8000356:	4618      	mov	r0, r3
 8000358:	f7ff ff50 	bl	80001fc <clearbit>
	setbit(ADC_SQR1,6);
 800035c:	4b24      	ldr	r3, [pc, #144]	; (80003f0 <main+0x1c8>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	2106      	movs	r1, #6
 8000362:	4618      	mov	r0, r3
 8000364:	f7ff ff36 	bl	80001d4 <setbit>





	ADC_CFGR=(uint32_t)ADC_BASE+0x0c;
 8000368:	4b20      	ldr	r3, [pc, #128]	; (80003ec <main+0x1c4>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	330c      	adds	r3, #12
 800036e:	461a      	mov	r2, r3
 8000370:	4b28      	ldr	r3, [pc, #160]	; (8000414 <main+0x1ec>)
 8000372:	601a      	str	r2, [r3, #0]
	setbit(ADC_CFGR,13);
 8000374:	4b27      	ldr	r3, [pc, #156]	; (8000414 <main+0x1ec>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	210d      	movs	r1, #13
 800037a:	4618      	mov	r0, r3
 800037c:	f7ff ff2a 	bl	80001d4 <setbit>

	setbit(PB,1);
 8000380:	4b21      	ldr	r3, [pc, #132]	; (8000408 <main+0x1e0>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	2101      	movs	r1, #1
 8000386:	4618      	mov	r0, r3
 8000388:	f7ff ff24 	bl	80001d4 <setbit>
	RCC_AHBENR=(uint32_t*)0x40021014;
 800038c:	4b22      	ldr	r3, [pc, #136]	; (8000418 <main+0x1f0>)
 800038e:	4a14      	ldr	r2, [pc, #80]	; (80003e0 <main+0x1b8>)
 8000390:	601a      	str	r2, [r3, #0]

	setbit(ADC_CR,0);
 8000392:	4b19      	ldr	r3, [pc, #100]	; (80003f8 <main+0x1d0>)
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	2100      	movs	r1, #0
 8000398:	4618      	mov	r0, r3
 800039a:	f7ff ff1b 	bl	80001d4 <setbit>

	led=(uint32_t)led+0x14;
 800039e:	4b11      	ldr	r3, [pc, #68]	; (80003e4 <main+0x1bc>)
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	3314      	adds	r3, #20
 80003a4:	461a      	mov	r2, r3
 80003a6:	4b0f      	ldr	r3, [pc, #60]	; (80003e4 <main+0x1bc>)
 80003a8:	601a      	str	r2, [r3, #0]
	setbit(ADC_CR,2);
 80003aa:	4b13      	ldr	r3, [pc, #76]	; (80003f8 <main+0x1d0>)
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	2102      	movs	r1, #2
 80003b0:	4618      	mov	r0, r3
 80003b2:	f7ff ff0f 	bl	80001d4 <setbit>
	while(*ADC_BASE==0);
 80003b6:	bf00      	nop
 80003b8:	4b0c      	ldr	r3, [pc, #48]	; (80003ec <main+0x1c4>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d0fa      	beq.n	80003b8 <main+0x190>
	while(1)
	{

		//clearbit(ADC_IER,2);
		//for(i=0;i<1000;i++);
		setbit(ADC_IER,2);
 80003c2:	4b0c      	ldr	r3, [pc, #48]	; (80003f4 <main+0x1cc>)
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	2102      	movs	r1, #2
 80003c8:	4618      	mov	r0, r3
 80003ca:	f7ff ff03 	bl	80001d4 <setbit>
		 //setbit(ADC_CR,0);
		 setbit(ADC_CR,2);
 80003ce:	4b0a      	ldr	r3, [pc, #40]	; (80003f8 <main+0x1d0>)
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	2102      	movs	r1, #2
 80003d4:	4618      	mov	r0, r3
 80003d6:	f7ff fefd 	bl	80001d4 <setbit>
		setbit(ADC_IER,2);
 80003da:	e7f2      	b.n	80003c2 <main+0x19a>
 80003dc:	2000001c 	.word	0x2000001c
 80003e0:	40021014 	.word	0x40021014
 80003e4:	20000048 	.word	0x20000048
 80003e8:	48001000 	.word	0x48001000
 80003ec:	20000020 	.word	0x20000020
 80003f0:	20000038 	.word	0x20000038
 80003f4:	20000024 	.word	0x20000024
 80003f8:	20000028 	.word	0x20000028
 80003fc:	20000040 	.word	0x20000040
 8000400:	50000308 	.word	0x50000308
 8000404:	2000003c 	.word	0x2000003c
 8000408:	20000030 	.word	0x20000030
 800040c:	20000044 	.word	0x20000044
 8000410:	e000e100 	.word	0xe000e100
 8000414:	2000002c 	.word	0x2000002c
 8000418:	20000034 	.word	0x20000034

0800041c <ADC1_2_IRQHandler>:



}
void ADC1_2_IRQHandler (void )
{
 800041c:	b580      	push	{r7, lr}
 800041e:	af00      	add	r7, sp, #0

	//for(i=0;i<100000000;i++);

	setbit(led,15);
 8000420:	4b05      	ldr	r3, [pc, #20]	; (8000438 <ADC1_2_IRQHandler+0x1c>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	210f      	movs	r1, #15
 8000426:	4618      	mov	r0, r3
 8000428:	f7ff fed4 	bl	80001d4 <setbit>

	setbit(clearbit,15);
 800042c:	210f      	movs	r1, #15
 800042e:	4803      	ldr	r0, [pc, #12]	; (800043c <ADC1_2_IRQHandler+0x20>)
 8000430:	f7ff fed0 	bl	80001d4 <setbit>

	//clearbit(ADC_BASE,2);
	//for(i=0;i<1000;i++);
	//clearbit(led,15);
	 //setbit(ADC_CR,2);
}
 8000434:	bf00      	nop
 8000436:	bd80      	pop	{r7, pc}
 8000438:	20000048 	.word	0x20000048
 800043c:	080001fd 	.word	0x080001fd

08000440 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000440:	480d      	ldr	r0, [pc, #52]	; (8000478 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000442:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000444:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000448:	480c      	ldr	r0, [pc, #48]	; (800047c <LoopForever+0x6>)
  ldr r1, =_edata
 800044a:	490d      	ldr	r1, [pc, #52]	; (8000480 <LoopForever+0xa>)
  ldr r2, =_sidata
 800044c:	4a0d      	ldr	r2, [pc, #52]	; (8000484 <LoopForever+0xe>)
  movs r3, #0
 800044e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000450:	e002      	b.n	8000458 <LoopCopyDataInit>

08000452 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000452:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000454:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000456:	3304      	adds	r3, #4

08000458 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000458:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800045a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800045c:	d3f9      	bcc.n	8000452 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800045e:	4a0a      	ldr	r2, [pc, #40]	; (8000488 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000460:	4c0a      	ldr	r4, [pc, #40]	; (800048c <LoopForever+0x16>)
  movs r3, #0
 8000462:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000464:	e001      	b.n	800046a <LoopFillZerobss>

08000466 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000466:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000468:	3204      	adds	r2, #4

0800046a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800046a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800046c:	d3fb      	bcc.n	8000466 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800046e:	f000 f811 	bl	8000494 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000472:	f7ff fed9 	bl	8000228 <main>

08000476 <LoopForever>:

LoopForever:
  b LoopForever
 8000476:	e7fe      	b.n	8000476 <LoopForever>
  ldr   r0, =_estack
 8000478:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800047c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000480:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000484:	080004fc 	.word	0x080004fc
  ldr r2, =_sbss
 8000488:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800048c:	2000004c 	.word	0x2000004c

08000490 <ADC3_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000490:	e7fe      	b.n	8000490 <ADC3_IRQHandler>
	...

08000494 <__libc_init_array>:
 8000494:	b570      	push	{r4, r5, r6, lr}
 8000496:	4d0d      	ldr	r5, [pc, #52]	; (80004cc <__libc_init_array+0x38>)
 8000498:	4c0d      	ldr	r4, [pc, #52]	; (80004d0 <__libc_init_array+0x3c>)
 800049a:	1b64      	subs	r4, r4, r5
 800049c:	10a4      	asrs	r4, r4, #2
 800049e:	2600      	movs	r6, #0
 80004a0:	42a6      	cmp	r6, r4
 80004a2:	d109      	bne.n	80004b8 <__libc_init_array+0x24>
 80004a4:	4d0b      	ldr	r5, [pc, #44]	; (80004d4 <__libc_init_array+0x40>)
 80004a6:	4c0c      	ldr	r4, [pc, #48]	; (80004d8 <__libc_init_array+0x44>)
 80004a8:	f000 f818 	bl	80004dc <_init>
 80004ac:	1b64      	subs	r4, r4, r5
 80004ae:	10a4      	asrs	r4, r4, #2
 80004b0:	2600      	movs	r6, #0
 80004b2:	42a6      	cmp	r6, r4
 80004b4:	d105      	bne.n	80004c2 <__libc_init_array+0x2e>
 80004b6:	bd70      	pop	{r4, r5, r6, pc}
 80004b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80004bc:	4798      	blx	r3
 80004be:	3601      	adds	r6, #1
 80004c0:	e7ee      	b.n	80004a0 <__libc_init_array+0xc>
 80004c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80004c6:	4798      	blx	r3
 80004c8:	3601      	adds	r6, #1
 80004ca:	e7f2      	b.n	80004b2 <__libc_init_array+0x1e>
 80004cc:	080004f4 	.word	0x080004f4
 80004d0:	080004f4 	.word	0x080004f4
 80004d4:	080004f4 	.word	0x080004f4
 80004d8:	080004f8 	.word	0x080004f8

080004dc <_init>:
 80004dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004de:	bf00      	nop
 80004e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004e2:	bc08      	pop	{r3}
 80004e4:	469e      	mov	lr, r3
 80004e6:	4770      	bx	lr

080004e8 <_fini>:
 80004e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004ea:	bf00      	nop
 80004ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004ee:	bc08      	pop	{r3}
 80004f0:	469e      	mov	lr, r3
 80004f2:	4770      	bx	lr
