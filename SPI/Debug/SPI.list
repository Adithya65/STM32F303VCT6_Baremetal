
SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000006bc  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000850  08000858  00010858  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000850  08000850  00010858  2**0
                  CONTENTS
  4 .ARM          00000000  08000850  08000850  00010858  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000850  08000858  00010858  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000850  08000850  00010850  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000854  08000854  00010854  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010858  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010858  2**0
                  CONTENTS
 10 .bss          00000094  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000094  20000094  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010858  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00010888  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000049e  00000000  00000000  000108cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000016f  00000000  00000000  00010d69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000078  00000000  00000000  00010ed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000004c  00000000  00000000  00010f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00000fd5  00000000  00000000  00010f9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00000964  00000000  00000000  00011f71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00003cfd  00000000  00000000  000128d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000000e0  00000000  00000000  000165d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005a  00000000  00000000  000166b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000838 	.word	0x08000838

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000838 	.word	0x08000838

080001d4 <setbit>:
 */

#include "SC.h"
#include "stdint.h"
void setbit(uint32_t *val,uint32_t pos)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
 80001dc:	6039      	str	r1, [r7, #0]
	*val=*val|(1<<pos);
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	2101      	movs	r1, #1
 80001e4:	683a      	ldr	r2, [r7, #0]
 80001e6:	fa01 f202 	lsl.w	r2, r1, r2
 80001ea:	431a      	orrs	r2, r3
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	601a      	str	r2, [r3, #0]

}
 80001f0:	bf00      	nop
 80001f2:	370c      	adds	r7, #12
 80001f4:	46bd      	mov	sp, r7
 80001f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fa:	4770      	bx	lr

080001fc <clearbit>:
void clearbit(uint32_t *val,uint32_t pos)
{
 80001fc:	b480      	push	{r7}
 80001fe:	b083      	sub	sp, #12
 8000200:	af00      	add	r7, sp, #0
 8000202:	6078      	str	r0, [r7, #4]
 8000204:	6039      	str	r1, [r7, #0]
	*val=*val&~(1<<pos);
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	2101      	movs	r1, #1
 800020c:	683a      	ldr	r2, [r7, #0]
 800020e:	fa01 f202 	lsl.w	r2, r1, r2
 8000212:	43d2      	mvns	r2, r2
 8000214:	401a      	ands	r2, r3
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	601a      	str	r2, [r3, #0]

}
 800021a:	bf00      	nop
 800021c:	370c      	adds	r7, #12
 800021e:	46bd      	mov	sp, r7
 8000220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000224:	4770      	bx	lr
	...

08000228 <main>:
uint32_t *USART1_CR1,*USART1_CR2,*RCC_APB2ENR,*USART_TDR,*USART_ISR,*USART_BRR,*GPIO_C,*RCC_AHBENR,*GPIO_AFR,*GPIO_AFRL,*GPIO_MODER,* GPIOx_ODR,*USART_RDR;
uint32_t *FLASH_CR,*FLASH_KEYR,*FLASH_SR,*FLASH_AR;
uint16_t test __attribute__((section(".custom_flash")));
uint16_t *ptr,count=0;
int main(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	af00      	add	r7, sp, #0
   RCC_AHBENR=(uint32_t*)0x40021014;
 800022c:	4ba2      	ldr	r3, [pc, #648]	; (80004b8 <main+0x290>)
 800022e:	4aa3      	ldr	r2, [pc, #652]	; (80004bc <main+0x294>)
 8000230:	601a      	str	r2, [r3, #0]
   GPIOA_MODER=(uint32_t*)0x48000000;
 8000232:	4ba3      	ldr	r3, [pc, #652]	; (80004c0 <main+0x298>)
 8000234:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000238:	601a      	str	r2, [r3, #0]
   GPIOE_MODER=(uint32_t*)0x48001000;
 800023a:	4ba2      	ldr	r3, [pc, #648]	; (80004c4 <main+0x29c>)
 800023c:	4aa2      	ldr	r2, [pc, #648]	; (80004c8 <main+0x2a0>)
 800023e:	601a      	str	r2, [r3, #0]
   GPIOA_AFRL=(uint32_t*)0x48000020;
 8000240:	4ba2      	ldr	r3, [pc, #648]	; (80004cc <main+0x2a4>)
 8000242:	4aa3      	ldr	r2, [pc, #652]	; (80004d0 <main+0x2a8>)
 8000244:	601a      	str	r2, [r3, #0]
   GPIOE_AFRL=(uint32_t*)0x48001020;
 8000246:	4ba3      	ldr	r3, [pc, #652]	; (80004d4 <main+0x2ac>)
 8000248:	4aa3      	ldr	r2, [pc, #652]	; (80004d8 <main+0x2b0>)
 800024a:	601a      	str	r2, [r3, #0]
   SPI1_CR1=(uint32_t*)0x40013000;
 800024c:	4ba3      	ldr	r3, [pc, #652]	; (80004dc <main+0x2b4>)
 800024e:	4aa4      	ldr	r2, [pc, #656]	; (80004e0 <main+0x2b8>)
 8000250:	601a      	str	r2, [r3, #0]
   SPI1_CR2=(uint32_t*)0x40013004;
 8000252:	4ba4      	ldr	r3, [pc, #656]	; (80004e4 <main+0x2bc>)
 8000254:	4aa4      	ldr	r2, [pc, #656]	; (80004e8 <main+0x2c0>)
 8000256:	601a      	str	r2, [r3, #0]
   RCC_APB2ENR=(uint32_t*)0x40021018;
 8000258:	4ba4      	ldr	r3, [pc, #656]	; (80004ec <main+0x2c4>)
 800025a:	4aa5      	ldr	r2, [pc, #660]	; (80004f0 <main+0x2c8>)
 800025c:	601a      	str	r2, [r3, #0]
   SPI1_SR=(uint32_t*)0x40013008;
 800025e:	4ba5      	ldr	r3, [pc, #660]	; (80004f4 <main+0x2cc>)
 8000260:	4aa5      	ldr	r2, [pc, #660]	; (80004f8 <main+0x2d0>)
 8000262:	601a      	str	r2, [r3, #0]
   SPI1_DR=(uint32_t*)0x4001300c;
 8000264:	4ba5      	ldr	r3, [pc, #660]	; (80004fc <main+0x2d4>)
 8000266:	4aa6      	ldr	r2, [pc, #664]	; (8000500 <main+0x2d8>)
 8000268:	601a      	str	r2, [r3, #0]
   GPIOE_ODR=(uint32_t*)0x48001014;
 800026a:	4ba6      	ldr	r3, [pc, #664]	; (8000504 <main+0x2dc>)
 800026c:	4aa6      	ldr	r2, [pc, #664]	; (8000508 <main+0x2e0>)
 800026e:	601a      	str	r2, [r3, #0]
   SPI1_DR=(uint32_t*)0x4001300c;
 8000270:	4ba2      	ldr	r3, [pc, #648]	; (80004fc <main+0x2d4>)
 8000272:	4aa3      	ldr	r2, [pc, #652]	; (8000500 <main+0x2d8>)
 8000274:	601a      	str	r2, [r3, #0]

   setbit(RCC_APB2ENR,12);//clock for SPI1
 8000276:	4b9d      	ldr	r3, [pc, #628]	; (80004ec <main+0x2c4>)
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	210c      	movs	r1, #12
 800027c:	4618      	mov	r0, r3
 800027e:	f7ff ffa9 	bl	80001d4 <setbit>
   setbit(RCC_AHBENR,17); //clock for GPIOA
 8000282:	4b8d      	ldr	r3, [pc, #564]	; (80004b8 <main+0x290>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	2111      	movs	r1, #17
 8000288:	4618      	mov	r0, r3
 800028a:	f7ff ffa3 	bl	80001d4 <setbit>
   setbit(RCC_AHBENR,21); //clock for GPIOE
 800028e:	4b8a      	ldr	r3, [pc, #552]	; (80004b8 <main+0x290>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	2115      	movs	r1, #21
 8000294:	4618      	mov	r0, r3
 8000296:	f7ff ff9d 	bl	80001d4 <setbit>
   setbit(GPIOE_MODER,6);//output mode for GPIOE
 800029a:	4b8a      	ldr	r3, [pc, #552]	; (80004c4 <main+0x29c>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	2106      	movs	r1, #6
 80002a0:	4618      	mov	r0, r3
 80002a2:	f7ff ff97 	bl	80001d4 <setbit>
   setbit(GPIOE_MODER,30);//output mode for GPIOE
 80002a6:	4b87      	ldr	r3, [pc, #540]	; (80004c4 <main+0x29c>)
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	211e      	movs	r1, #30
 80002ac:	4618      	mov	r0, r3
 80002ae:	f7ff ff91 	bl	80001d4 <setbit>
   setbit(GPIOA_MODER,11); //set mode-AF 5
 80002b2:	4b83      	ldr	r3, [pc, #524]	; (80004c0 <main+0x298>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	210b      	movs	r1, #11
 80002b8:	4618      	mov	r0, r3
 80002ba:	f7ff ff8b 	bl	80001d4 <setbit>
   setbit(GPIOA_MODER,13); //set mode-AF 6
 80002be:	4b80      	ldr	r3, [pc, #512]	; (80004c0 <main+0x298>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	210d      	movs	r1, #13
 80002c4:	4618      	mov	r0, r3
 80002c6:	f7ff ff85 	bl	80001d4 <setbit>
   setbit(GPIOA_MODER,15); //set mode-AF 7
 80002ca:	4b7d      	ldr	r3, [pc, #500]	; (80004c0 <main+0x298>)
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	210f      	movs	r1, #15
 80002d0:	4618      	mov	r0, r3
 80002d2:	f7ff ff7f 	bl	80001d4 <setbit>
   setbit(GPIOA_AFRL,20); //AFRL 5 for GPIOA
 80002d6:	4b7d      	ldr	r3, [pc, #500]	; (80004cc <main+0x2a4>)
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	2114      	movs	r1, #20
 80002dc:	4618      	mov	r0, r3
 80002de:	f7ff ff79 	bl	80001d4 <setbit>
   setbit(GPIOA_AFRL,22); //AFRL 5 for GPIOA
 80002e2:	4b7a      	ldr	r3, [pc, #488]	; (80004cc <main+0x2a4>)
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	2116      	movs	r1, #22
 80002e8:	4618      	mov	r0, r3
 80002ea:	f7ff ff73 	bl	80001d4 <setbit>
   setbit(GPIOA_AFRL,24); //AFRL 5 for GPIOA
 80002ee:	4b77      	ldr	r3, [pc, #476]	; (80004cc <main+0x2a4>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	2118      	movs	r1, #24
 80002f4:	4618      	mov	r0, r3
 80002f6:	f7ff ff6d 	bl	80001d4 <setbit>
   setbit(GPIOA_AFRL,26); //AFRL 5 for GPIOA
 80002fa:	4b74      	ldr	r3, [pc, #464]	; (80004cc <main+0x2a4>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	211a      	movs	r1, #26
 8000300:	4618      	mov	r0, r3
 8000302:	f7ff ff67 	bl	80001d4 <setbit>
   setbit(GPIOA_AFRL,28); //AFRL 5 for GPIOA
 8000306:	4b71      	ldr	r3, [pc, #452]	; (80004cc <main+0x2a4>)
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	211c      	movs	r1, #28
 800030c:	4618      	mov	r0, r3
 800030e:	f7ff ff61 	bl	80001d4 <setbit>
   setbit(GPIOA_AFRL,30); //AFRL 5 for GPIOA
 8000312:	4b6e      	ldr	r3, [pc, #440]	; (80004cc <main+0x2a4>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	211e      	movs	r1, #30
 8000318:	4618      	mov	r0, r3
 800031a:	f7ff ff5b 	bl	80001d4 <setbit>
   setbit(GPIOE_ODR,3);   //CS high
 800031e:	4b79      	ldr	r3, [pc, #484]	; (8000504 <main+0x2dc>)
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	2103      	movs	r1, #3
 8000324:	4618      	mov	r0, r3
 8000326:	f7ff ff55 	bl	80001d4 <setbit>
   setbit(SPI1_CR1,2); // master selection
 800032a:	4b6c      	ldr	r3, [pc, #432]	; (80004dc <main+0x2b4>)
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	2102      	movs	r1, #2
 8000330:	4618      	mov	r0, r3
 8000332:	f7ff ff4f 	bl	80001d4 <setbit>
   setbit(SPI1_CR2,2); //ssout
 8000336:	4b6b      	ldr	r3, [pc, #428]	; (80004e4 <main+0x2bc>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	2102      	movs	r1, #2
 800033c:	4618      	mov	r0, r3
 800033e:	f7ff ff49 	bl	80001d4 <setbit>
   setbit(SPI1_CR2,8); //Data length
 8000342:	4b68      	ldr	r3, [pc, #416]	; (80004e4 <main+0x2bc>)
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	2108      	movs	r1, #8
 8000348:	4618      	mov	r0, r3
 800034a:	f7ff ff43 	bl	80001d4 <setbit>
   setbit(SPI1_CR2,9);//Data length
 800034e:	4b65      	ldr	r3, [pc, #404]	; (80004e4 <main+0x2bc>)
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	2109      	movs	r1, #9
 8000354:	4618      	mov	r0, r3
 8000356:	f7ff ff3d 	bl	80001d4 <setbit>
   setbit(SPI1_CR2,10);//Data length
 800035a:	4b62      	ldr	r3, [pc, #392]	; (80004e4 <main+0x2bc>)
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	210a      	movs	r1, #10
 8000360:	4618      	mov	r0, r3
 8000362:	f7ff ff37 	bl	80001d4 <setbit>
   setbit(SPI1_CR2,11);//Data length
 8000366:	4b5f      	ldr	r3, [pc, #380]	; (80004e4 <main+0x2bc>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	210b      	movs	r1, #11
 800036c:	4618      	mov	r0, r3
 800036e:	f7ff ff31 	bl	80001d4 <setbit>
   setbit(SPI1_CR1,6); // SPI enable
 8000372:	4b5a      	ldr	r3, [pc, #360]	; (80004dc <main+0x2b4>)
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	2106      	movs	r1, #6
 8000378:	4618      	mov	r0, r3
 800037a:	f7ff ff2b 	bl	80001d4 <setbit>

   USART1_CR1=(uint32_t *)0x40013800;
 800037e:	4b63      	ldr	r3, [pc, #396]	; (800050c <main+0x2e4>)
 8000380:	4a63      	ldr	r2, [pc, #396]	; (8000510 <main+0x2e8>)
 8000382:	601a      	str	r2, [r3, #0]
      USART1_CR2=(uint32_t *)0x40013804;
 8000384:	4b63      	ldr	r3, [pc, #396]	; (8000514 <main+0x2ec>)
 8000386:	4a64      	ldr	r2, [pc, #400]	; (8000518 <main+0x2f0>)
 8000388:	601a      	str	r2, [r3, #0]
      RCC_APB2ENR=(uint32_t*)0x40021018;
 800038a:	4b58      	ldr	r3, [pc, #352]	; (80004ec <main+0x2c4>)
 800038c:	4a58      	ldr	r2, [pc, #352]	; (80004f0 <main+0x2c8>)
 800038e:	601a      	str	r2, [r3, #0]
      USART_TDR=(uint32_t*)0x40013828;
 8000390:	4b62      	ldr	r3, [pc, #392]	; (800051c <main+0x2f4>)
 8000392:	4a63      	ldr	r2, [pc, #396]	; (8000520 <main+0x2f8>)
 8000394:	601a      	str	r2, [r3, #0]
      USART_ISR=(uint32_t*)0x4001381c;
 8000396:	4b63      	ldr	r3, [pc, #396]	; (8000524 <main+0x2fc>)
 8000398:	4a63      	ldr	r2, [pc, #396]	; (8000528 <main+0x300>)
 800039a:	601a      	str	r2, [r3, #0]
      USART_BRR=(uint32_t *)0x4001380c;
 800039c:	4b63      	ldr	r3, [pc, #396]	; (800052c <main+0x304>)
 800039e:	4a64      	ldr	r2, [pc, #400]	; (8000530 <main+0x308>)
 80003a0:	601a      	str	r2, [r3, #0]
      RCC_AHBENR=(uint32_t*)0x40021014;
 80003a2:	4b45      	ldr	r3, [pc, #276]	; (80004b8 <main+0x290>)
 80003a4:	4a45      	ldr	r2, [pc, #276]	; (80004bc <main+0x294>)
 80003a6:	601a      	str	r2, [r3, #0]
      GPIO_MODER=(uint32_t*)0x48001000;
 80003a8:	4b62      	ldr	r3, [pc, #392]	; (8000534 <main+0x30c>)
 80003aa:	4a47      	ldr	r2, [pc, #284]	; (80004c8 <main+0x2a0>)
 80003ac:	601a      	str	r2, [r3, #0]
      GPIOx_ODR=(uint32_t*)0x48001014;
 80003ae:	4b62      	ldr	r3, [pc, #392]	; (8000538 <main+0x310>)
 80003b0:	4a55      	ldr	r2, [pc, #340]	; (8000508 <main+0x2e0>)
 80003b2:	601a      	str	r2, [r3, #0]
      USART_RDR=(uint32_t*)0x40013824;
 80003b4:	4b61      	ldr	r3, [pc, #388]	; (800053c <main+0x314>)
 80003b6:	4a62      	ldr	r2, [pc, #392]	; (8000540 <main+0x318>)
 80003b8:	601a      	str	r2, [r3, #0]
      FLASH_CR=(uint32_t*)0x40022010;
 80003ba:	4b62      	ldr	r3, [pc, #392]	; (8000544 <main+0x31c>)
 80003bc:	4a62      	ldr	r2, [pc, #392]	; (8000548 <main+0x320>)
 80003be:	601a      	str	r2, [r3, #0]
      FLASH_KEYR=(uint32_t*)0x40022004;
 80003c0:	4b62      	ldr	r3, [pc, #392]	; (800054c <main+0x324>)
 80003c2:	4a63      	ldr	r2, [pc, #396]	; (8000550 <main+0x328>)
 80003c4:	601a      	str	r2, [r3, #0]
      FLASH_SR=(uint32_t*)0x4002200c;
 80003c6:	4b63      	ldr	r3, [pc, #396]	; (8000554 <main+0x32c>)
 80003c8:	4a63      	ldr	r2, [pc, #396]	; (8000558 <main+0x330>)
 80003ca:	601a      	str	r2, [r3, #0]
      FLASH_AR=(uint32_t*)0x40022014;
 80003cc:	4b63      	ldr	r3, [pc, #396]	; (800055c <main+0x334>)
 80003ce:	4a64      	ldr	r2, [pc, #400]	; (8000560 <main+0x338>)
 80003d0:	601a      	str	r2, [r3, #0]
      ptr=(uint16_t*)0x08010000;
 80003d2:	4b64      	ldr	r3, [pc, #400]	; (8000564 <main+0x33c>)
 80003d4:	4a64      	ldr	r2, [pc, #400]	; (8000568 <main+0x340>)
 80003d6:	601a      	str	r2, [r3, #0]
      setbit(RCC_AHBENR,19);
 80003d8:	4b37      	ldr	r3, [pc, #220]	; (80004b8 <main+0x290>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	2113      	movs	r1, #19
 80003de:	4618      	mov	r0, r3
 80003e0:	f7ff fef8 	bl	80001d4 <setbit>
      setbit(RCC_APB2ENR,14);
 80003e4:	4b41      	ldr	r3, [pc, #260]	; (80004ec <main+0x2c4>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	210e      	movs	r1, #14
 80003ea:	4618      	mov	r0, r3
 80003ec:	f7ff fef2 	bl	80001d4 <setbit>
      *USART_BRR=0x341;
 80003f0:	4b4e      	ldr	r3, [pc, #312]	; (800052c <main+0x304>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	f240 3241 	movw	r2, #833	; 0x341
 80003f8:	601a      	str	r2, [r3, #0]
      GPIO_C=(uint32_t*)0x48000800;
 80003fa:	4b5c      	ldr	r3, [pc, #368]	; (800056c <main+0x344>)
 80003fc:	4a5c      	ldr	r2, [pc, #368]	; (8000570 <main+0x348>)
 80003fe:	601a      	str	r2, [r3, #0]
      setbit(GPIO_C,11);
 8000400:	4b5a      	ldr	r3, [pc, #360]	; (800056c <main+0x344>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	210b      	movs	r1, #11
 8000406:	4618      	mov	r0, r3
 8000408:	f7ff fee4 	bl	80001d4 <setbit>
      setbit(GPIO_C,9);
 800040c:	4b57      	ldr	r3, [pc, #348]	; (800056c <main+0x344>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	2109      	movs	r1, #9
 8000412:	4618      	mov	r0, r3
 8000414:	f7ff fede 	bl	80001d4 <setbit>
      setbit(RCC_AHBENR,21);
 8000418:	4b27      	ldr	r3, [pc, #156]	; (80004b8 <main+0x290>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	2115      	movs	r1, #21
 800041e:	4618      	mov	r0, r3
 8000420:	f7ff fed8 	bl	80001d4 <setbit>
      GPIO_AFRL=(uint32_t*)0x48000820;
 8000424:	4b53      	ldr	r3, [pc, #332]	; (8000574 <main+0x34c>)
 8000426:	4a54      	ldr	r2, [pc, #336]	; (8000578 <main+0x350>)
 8000428:	601a      	str	r2, [r3, #0]
      *GPIO_AFRL =*GPIO_AFRL| (7<<16);
 800042a:	4b52      	ldr	r3, [pc, #328]	; (8000574 <main+0x34c>)
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	681a      	ldr	r2, [r3, #0]
 8000430:	4b50      	ldr	r3, [pc, #320]	; (8000574 <main+0x34c>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	f442 22e0 	orr.w	r2, r2, #458752	; 0x70000
 8000438:	601a      	str	r2, [r3, #0]
      *GPIO_AFRL =*GPIO_AFRL| (7<<20);
 800043a:	4b4e      	ldr	r3, [pc, #312]	; (8000574 <main+0x34c>)
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	681a      	ldr	r2, [r3, #0]
 8000440:	4b4c      	ldr	r3, [pc, #304]	; (8000574 <main+0x34c>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	f442 02e0 	orr.w	r2, r2, #7340032	; 0x700000
 8000448:	601a      	str	r2, [r3, #0]
      setbit(GPIO_MODER,30);
 800044a:	4b3a      	ldr	r3, [pc, #232]	; (8000534 <main+0x30c>)
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	211e      	movs	r1, #30
 8000450:	4618      	mov	r0, r3
 8000452:	f7ff febf 	bl	80001d4 <setbit>
      setbit(USART1_CR1,0);
 8000456:	4b2d      	ldr	r3, [pc, #180]	; (800050c <main+0x2e4>)
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	2100      	movs	r1, #0
 800045c:	4618      	mov	r0, r3
 800045e:	f7ff feb9 	bl	80001d4 <setbit>
      setbit(USART1_CR1,2);
 8000462:	4b2a      	ldr	r3, [pc, #168]	; (800050c <main+0x2e4>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	2102      	movs	r1, #2
 8000468:	4618      	mov	r0, r3
 800046a:	f7ff feb3 	bl	80001d4 <setbit>
      setbit(USART1_CR1,3);
 800046e:	4b27      	ldr	r3, [pc, #156]	; (800050c <main+0x2e4>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	2103      	movs	r1, #3
 8000474:	4618      	mov	r0, r3
 8000476:	f7ff fead 	bl	80001d4 <setbit>
      *FLASH_KEYR=0x45670123;
 800047a:	4b34      	ldr	r3, [pc, #208]	; (800054c <main+0x324>)
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	4a3f      	ldr	r2, [pc, #252]	; (800057c <main+0x354>)
 8000480:	601a      	str	r2, [r3, #0]
      *FLASH_KEYR=0xCDEF89AB;
 8000482:	4b32      	ldr	r3, [pc, #200]	; (800054c <main+0x324>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	4a3e      	ldr	r2, [pc, #248]	; (8000580 <main+0x358>)
 8000488:	601a      	str	r2, [r3, #0]
      while(*FLASH_SR & (1<<0));
 800048a:	bf00      	nop
 800048c:	4b31      	ldr	r3, [pc, #196]	; (8000554 <main+0x32c>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	f003 0301 	and.w	r3, r3, #1
 8000496:	2b00      	cmp	r3, #0
 8000498:	d1f8      	bne.n	800048c <main+0x264>
      setbit(FLASH_CR,1);
 800049a:	4b2a      	ldr	r3, [pc, #168]	; (8000544 <main+0x31c>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	2101      	movs	r1, #1
 80004a0:	4618      	mov	r0, r3
 80004a2:	f7ff fe97 	bl	80001d4 <setbit>
      *FLASH_AR = 0x08010000;
 80004a6:	4b2d      	ldr	r3, [pc, #180]	; (800055c <main+0x334>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	4a2f      	ldr	r2, [pc, #188]	; (8000568 <main+0x340>)
 80004ac:	601a      	str	r2, [r3, #0]
      setbit(FLASH_CR,6);
 80004ae:	4b25      	ldr	r3, [pc, #148]	; (8000544 <main+0x31c>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	2106      	movs	r1, #6
 80004b4:	e066      	b.n	8000584 <main+0x35c>
 80004b6:	bf00      	nop
 80004b8:	2000001c 	.word	0x2000001c
 80004bc:	40021014 	.word	0x40021014
 80004c0:	20000020 	.word	0x20000020
 80004c4:	20000024 	.word	0x20000024
 80004c8:	48001000 	.word	0x48001000
 80004cc:	20000028 	.word	0x20000028
 80004d0:	48000020 	.word	0x48000020
 80004d4:	2000002c 	.word	0x2000002c
 80004d8:	48001020 	.word	0x48001020
 80004dc:	20000030 	.word	0x20000030
 80004e0:	40013000 	.word	0x40013000
 80004e4:	20000034 	.word	0x20000034
 80004e8:	40013004 	.word	0x40013004
 80004ec:	20000038 	.word	0x20000038
 80004f0:	40021018 	.word	0x40021018
 80004f4:	2000003c 	.word	0x2000003c
 80004f8:	40013008 	.word	0x40013008
 80004fc:	20000040 	.word	0x20000040
 8000500:	4001300c 	.word	0x4001300c
 8000504:	20000044 	.word	0x20000044
 8000508:	48001014 	.word	0x48001014
 800050c:	20000054 	.word	0x20000054
 8000510:	40013800 	.word	0x40013800
 8000514:	20000058 	.word	0x20000058
 8000518:	40013804 	.word	0x40013804
 800051c:	2000005c 	.word	0x2000005c
 8000520:	40013828 	.word	0x40013828
 8000524:	20000060 	.word	0x20000060
 8000528:	4001381c 	.word	0x4001381c
 800052c:	20000064 	.word	0x20000064
 8000530:	4001380c 	.word	0x4001380c
 8000534:	20000070 	.word	0x20000070
 8000538:	20000074 	.word	0x20000074
 800053c:	20000078 	.word	0x20000078
 8000540:	40013824 	.word	0x40013824
 8000544:	2000007c 	.word	0x2000007c
 8000548:	40022010 	.word	0x40022010
 800054c:	20000080 	.word	0x20000080
 8000550:	40022004 	.word	0x40022004
 8000554:	20000084 	.word	0x20000084
 8000558:	4002200c 	.word	0x4002200c
 800055c:	20000088 	.word	0x20000088
 8000560:	40022014 	.word	0x40022014
 8000564:	2000008c 	.word	0x2000008c
 8000568:	08010000 	.word	0x08010000
 800056c:	20000068 	.word	0x20000068
 8000570:	48000800 	.word	0x48000800
 8000574:	2000006c 	.word	0x2000006c
 8000578:	48000820 	.word	0x48000820
 800057c:	45670123 	.word	0x45670123
 8000580:	cdef89ab 	.word	0xcdef89ab
 8000584:	4618      	mov	r0, r3
 8000586:	f7ff fe25 	bl	80001d4 <setbit>
      while(*FLASH_SR & (1<<0));
 800058a:	bf00      	nop
 800058c:	4b74      	ldr	r3, [pc, #464]	; (8000760 <main+0x538>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	f003 0301 	and.w	r3, r3, #1
 8000596:	2b00      	cmp	r3, #0
 8000598:	d1f8      	bne.n	800058c <main+0x364>
      clearbit(FLASH_SR,5);
 800059a:	4b71      	ldr	r3, [pc, #452]	; (8000760 <main+0x538>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	2105      	movs	r1, #5
 80005a0:	4618      	mov	r0, r3
 80005a2:	f7ff fe2b 	bl	80001fc <clearbit>
      clearbit(FLASH_CR,1);
 80005a6:	4b6f      	ldr	r3, [pc, #444]	; (8000764 <main+0x53c>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	2101      	movs	r1, #1
 80005ac:	4618      	mov	r0, r3
 80005ae:	f7ff fe25 	bl	80001fc <clearbit>
      *FLASH_KEYR=0x45670123;
 80005b2:	4b6d      	ldr	r3, [pc, #436]	; (8000768 <main+0x540>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4a6d      	ldr	r2, [pc, #436]	; (800076c <main+0x544>)
 80005b8:	601a      	str	r2, [r3, #0]
      *FLASH_KEYR=0xCDEF89AB;
 80005ba:	4b6b      	ldr	r3, [pc, #428]	; (8000768 <main+0x540>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	4a6c      	ldr	r2, [pc, #432]	; (8000770 <main+0x548>)
 80005c0:	601a      	str	r2, [r3, #0]
       while(((*FLASH_SR)&(1<<0))==1);
 80005c2:	bf00      	nop
 80005c4:	4b66      	ldr	r3, [pc, #408]	; (8000760 <main+0x538>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	f003 0301 	and.w	r3, r3, #1
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d1f8      	bne.n	80005c4 <main+0x39c>
       setbit(FLASH_CR,0);
 80005d2:	4b64      	ldr	r3, [pc, #400]	; (8000764 <main+0x53c>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	2100      	movs	r1, #0
 80005d8:	4618      	mov	r0, r3
 80005da:	f7ff fdfb 	bl	80001d4 <setbit>
       *FLASH_AR = 0x08010000;
 80005de:	4b65      	ldr	r3, [pc, #404]	; (8000774 <main+0x54c>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	4a65      	ldr	r2, [pc, #404]	; (8000778 <main+0x550>)
 80005e4:	601a      	str	r2, [r3, #0]

   clearbit(GPIOE_ODR,3);//CS low
 80005e6:	4b65      	ldr	r3, [pc, #404]	; (800077c <main+0x554>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	2103      	movs	r1, #3
 80005ec:	4618      	mov	r0, r3
 80005ee:	f7ff fe05 	bl	80001fc <clearbit>
   while((*SPI1_SR & (1<<7))==1);// check busy
 80005f2:	bf00      	nop
   *SPI1_DR=0B0010000000111111;//
 80005f4:	4b62      	ldr	r3, [pc, #392]	; (8000780 <main+0x558>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f242 023f 	movw	r2, #8255	; 0x203f
 80005fc:	601a      	str	r2, [r3, #0]
   for(i=0;i<64000;i++);
 80005fe:	4b61      	ldr	r3, [pc, #388]	; (8000784 <main+0x55c>)
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	e004      	b.n	8000610 <main+0x3e8>
 8000606:	4b5f      	ldr	r3, [pc, #380]	; (8000784 <main+0x55c>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	3301      	adds	r3, #1
 800060c:	4a5d      	ldr	r2, [pc, #372]	; (8000784 <main+0x55c>)
 800060e:	6013      	str	r3, [r2, #0]
 8000610:	4b5c      	ldr	r3, [pc, #368]	; (8000784 <main+0x55c>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	f5b3 4f7a 	cmp.w	r3, #64000	; 0xfa00
 8000618:	d3f5      	bcc.n	8000606 <main+0x3de>
   setbit(GPIOE_ODR,3);//cs high
 800061a:	4b58      	ldr	r3, [pc, #352]	; (800077c <main+0x554>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	2103      	movs	r1, #3
 8000620:	4618      	mov	r0, r3
 8000622:	f7ff fdd7 	bl	80001d4 <setbit>
   while(*SPI1_SR&(1<<1)==0);
 8000626:	bf00      	nop

    while(1)
   {
	   clearbit(GPIOE_ODR,3);//CS low
 8000628:	4b54      	ldr	r3, [pc, #336]	; (800077c <main+0x554>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	2103      	movs	r1, #3
 800062e:	4618      	mov	r0, r3
 8000630:	f7ff fde4 	bl	80001fc <clearbit>
	   while((*SPI1_SR & (1<<7))==1);//CHECK IF SPI IS BUSY
 8000634:	bf00      	nop
	   *SPI1_DR =(0B1010100011111111);//read &X_L
 8000636:	4b52      	ldr	r3, [pc, #328]	; (8000780 <main+0x558>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f64a 02ff 	movw	r2, #43263	; 0xa8ff
 800063e:	601a      	str	r2, [r3, #0]
	   while((*SPI1_SR & (1<<1))==0); // CHECK IF TRANSMISSION COMPLETE
 8000640:	bf00      	nop
 8000642:	4b51      	ldr	r3, [pc, #324]	; (8000788 <main+0x560>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	f003 0302 	and.w	r3, r3, #2
 800064c:	2b00      	cmp	r3, #0
 800064e:	d0f8      	beq.n	8000642 <main+0x41a>
	   X_L = *SPI1_DR;
 8000650:	4b4b      	ldr	r3, [pc, #300]	; (8000780 <main+0x558>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	4a4d      	ldr	r2, [pc, #308]	; (800078c <main+0x564>)
 8000658:	6013      	str	r3, [r2, #0]
	   *USART_TDR=0;
 800065a:	4b4d      	ldr	r3, [pc, #308]	; (8000790 <main+0x568>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	2200      	movs	r2, #0
 8000660:	601a      	str	r2, [r3, #0]

	   if(X_L<127)
 8000662:	4b4a      	ldr	r3, [pc, #296]	; (800078c <main+0x564>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	2b7e      	cmp	r3, #126	; 0x7e
 8000668:	d825      	bhi.n	80006b6 <main+0x48e>
	   {
		   if(X_L<127)
 800066a:	4b48      	ldr	r3, [pc, #288]	; (800078c <main+0x564>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	2b7e      	cmp	r3, #126	; 0x7e
 8000670:	d821      	bhi.n	80006b6 <main+0x48e>
		   	   {
			   setbit(GPIOE_ODR,15);
 8000672:	4b42      	ldr	r3, [pc, #264]	; (800077c <main+0x554>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	210f      	movs	r1, #15
 8000678:	4618      	mov	r0, r3
 800067a:	f7ff fdab 	bl	80001d4 <setbit>
			   *USART_TDR='0'+count;
 800067e:	4b45      	ldr	r3, [pc, #276]	; (8000794 <main+0x56c>)
 8000680:	881b      	ldrh	r3, [r3, #0]
 8000682:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8000686:	4b42      	ldr	r3, [pc, #264]	; (8000790 <main+0x568>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	601a      	str	r2, [r3, #0]
			   count=count+1;
 800068c:	4b41      	ldr	r3, [pc, #260]	; (8000794 <main+0x56c>)
 800068e:	881b      	ldrh	r3, [r3, #0]
 8000690:	3301      	adds	r3, #1
 8000692:	b29a      	uxth	r2, r3
 8000694:	4b3f      	ldr	r3, [pc, #252]	; (8000794 <main+0x56c>)
 8000696:	801a      	strh	r2, [r3, #0]
			   for(i=0;i<60000;i++);
 8000698:	4b3a      	ldr	r3, [pc, #232]	; (8000784 <main+0x55c>)
 800069a:	2200      	movs	r2, #0
 800069c:	601a      	str	r2, [r3, #0]
 800069e:	e004      	b.n	80006aa <main+0x482>
 80006a0:	4b38      	ldr	r3, [pc, #224]	; (8000784 <main+0x55c>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	3301      	adds	r3, #1
 80006a6:	4a37      	ldr	r2, [pc, #220]	; (8000784 <main+0x55c>)
 80006a8:	6013      	str	r3, [r2, #0]
 80006aa:	4b36      	ldr	r3, [pc, #216]	; (8000784 <main+0x55c>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80006b2:	4293      	cmp	r3, r2
 80006b4:	d9f4      	bls.n	80006a0 <main+0x478>
		   	   }
	   }
	   clearbit(GPIOE_ODR,15);
 80006b6:	4b31      	ldr	r3, [pc, #196]	; (800077c <main+0x554>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	210f      	movs	r1, #15
 80006bc:	4618      	mov	r0, r3
 80006be:	f7ff fd9d 	bl	80001fc <clearbit>
	   setbit(GPIOE_ODR,3);
 80006c2:	4b2e      	ldr	r3, [pc, #184]	; (800077c <main+0x554>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	2103      	movs	r1, #3
 80006c8:	4618      	mov	r0, r3
 80006ca:	f7ff fd83 	bl	80001d4 <setbit>
	   for(i=0;i<64000;i++);
 80006ce:	4b2d      	ldr	r3, [pc, #180]	; (8000784 <main+0x55c>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	e004      	b.n	80006e0 <main+0x4b8>
 80006d6:	4b2b      	ldr	r3, [pc, #172]	; (8000784 <main+0x55c>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	3301      	adds	r3, #1
 80006dc:	4a29      	ldr	r2, [pc, #164]	; (8000784 <main+0x55c>)
 80006de:	6013      	str	r3, [r2, #0]
 80006e0:	4b28      	ldr	r3, [pc, #160]	; (8000784 <main+0x55c>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	f5b3 4f7a 	cmp.w	r3, #64000	; 0xfa00
 80006e8:	d3f5      	bcc.n	80006d6 <main+0x4ae>
	   clearbit(GPIOE_ODR,3);
 80006ea:	4b24      	ldr	r3, [pc, #144]	; (800077c <main+0x554>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	2103      	movs	r1, #3
 80006f0:	4618      	mov	r0, r3
 80006f2:	f7ff fd83 	bl	80001fc <clearbit>
	   while((*SPI1_SR & (1<<0))==0); // CHECK IF RECIEPTION COMPLETE
 80006f6:	bf00      	nop
 80006f8:	4b23      	ldr	r3, [pc, #140]	; (8000788 <main+0x560>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f003 0301 	and.w	r3, r3, #1
 8000702:	2b00      	cmp	r3, #0
 8000704:	d0f8      	beq.n	80006f8 <main+0x4d0>
	   *SPI1_DR =(0B1010101011111111);//read &X_H
 8000706:	4b1e      	ldr	r3, [pc, #120]	; (8000780 <main+0x558>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	f64a 22ff 	movw	r2, #43775	; 0xaaff
 800070e:	601a      	str	r2, [r3, #0]
	   while((*SPI1_SR & (1<<1))==0); // CHECK IF TRANSMISSION COMPLETE
 8000710:	bf00      	nop
 8000712:	4b1d      	ldr	r3, [pc, #116]	; (8000788 <main+0x560>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	f003 0302 	and.w	r3, r3, #2
 800071c:	2b00      	cmp	r3, #0
 800071e:	d0f8      	beq.n	8000712 <main+0x4ea>
	   X_H = *SPI1_DR;
 8000720:	4b17      	ldr	r3, [pc, #92]	; (8000780 <main+0x558>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	4a1c      	ldr	r2, [pc, #112]	; (8000798 <main+0x570>)
 8000728:	6013      	str	r3, [r2, #0]
	   setbit(GPIOE_ODR,3);
 800072a:	4b14      	ldr	r3, [pc, #80]	; (800077c <main+0x554>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	2103      	movs	r1, #3
 8000730:	4618      	mov	r0, r3
 8000732:	f7ff fd4f 	bl	80001d4 <setbit>
	   for(i=0;i<64000;i++);
 8000736:	4b13      	ldr	r3, [pc, #76]	; (8000784 <main+0x55c>)
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	e004      	b.n	8000748 <main+0x520>
 800073e:	4b11      	ldr	r3, [pc, #68]	; (8000784 <main+0x55c>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	3301      	adds	r3, #1
 8000744:	4a0f      	ldr	r2, [pc, #60]	; (8000784 <main+0x55c>)
 8000746:	6013      	str	r3, [r2, #0]
 8000748:	4b0e      	ldr	r3, [pc, #56]	; (8000784 <main+0x55c>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	f5b3 4f7a 	cmp.w	r3, #64000	; 0xfa00
 8000750:	d3f5      	bcc.n	800073e <main+0x516>
	   clearbit(GPIOE_ODR,3);
 8000752:	4b0a      	ldr	r3, [pc, #40]	; (800077c <main+0x554>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	2103      	movs	r1, #3
 8000758:	4618      	mov	r0, r3
 800075a:	f7ff fd4f 	bl	80001fc <clearbit>
	   clearbit(GPIOE_ODR,3);//CS low
 800075e:	e763      	b.n	8000628 <main+0x400>
 8000760:	20000084 	.word	0x20000084
 8000764:	2000007c 	.word	0x2000007c
 8000768:	20000080 	.word	0x20000080
 800076c:	45670123 	.word	0x45670123
 8000770:	cdef89ab 	.word	0xcdef89ab
 8000774:	20000088 	.word	0x20000088
 8000778:	08010000 	.word	0x08010000
 800077c:	20000044 	.word	0x20000044
 8000780:	20000040 	.word	0x20000040
 8000784:	20000050 	.word	0x20000050
 8000788:	2000003c 	.word	0x2000003c
 800078c:	20000048 	.word	0x20000048
 8000790:	2000005c 	.word	0x2000005c
 8000794:	20000090 	.word	0x20000090
 8000798:	2000004c 	.word	0x2000004c

0800079c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800079c:	480d      	ldr	r0, [pc, #52]	; (80007d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800079e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80007a0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007a4:	480c      	ldr	r0, [pc, #48]	; (80007d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80007a6:	490d      	ldr	r1, [pc, #52]	; (80007dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80007a8:	4a0d      	ldr	r2, [pc, #52]	; (80007e0 <LoopForever+0xe>)
  movs r3, #0
 80007aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007ac:	e002      	b.n	80007b4 <LoopCopyDataInit>

080007ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007b2:	3304      	adds	r3, #4

080007b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007b8:	d3f9      	bcc.n	80007ae <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007ba:	4a0a      	ldr	r2, [pc, #40]	; (80007e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007bc:	4c0a      	ldr	r4, [pc, #40]	; (80007e8 <LoopForever+0x16>)
  movs r3, #0
 80007be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007c0:	e001      	b.n	80007c6 <LoopFillZerobss>

080007c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007c4:	3204      	adds	r2, #4

080007c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007c8:	d3fb      	bcc.n	80007c2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80007ca:	f000 f811 	bl	80007f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007ce:	f7ff fd2b 	bl	8000228 <main>

080007d2 <LoopForever>:

LoopForever:
  b LoopForever
 80007d2:	e7fe      	b.n	80007d2 <LoopForever>
  ldr   r0, =_estack
 80007d4:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80007d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007dc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80007e0:	08000858 	.word	0x08000858
  ldr r2, =_sbss
 80007e4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80007e8:	20000094 	.word	0x20000094

080007ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007ec:	e7fe      	b.n	80007ec <ADC1_2_IRQHandler>
	...

080007f0 <__libc_init_array>:
 80007f0:	b570      	push	{r4, r5, r6, lr}
 80007f2:	4d0d      	ldr	r5, [pc, #52]	; (8000828 <__libc_init_array+0x38>)
 80007f4:	4c0d      	ldr	r4, [pc, #52]	; (800082c <__libc_init_array+0x3c>)
 80007f6:	1b64      	subs	r4, r4, r5
 80007f8:	10a4      	asrs	r4, r4, #2
 80007fa:	2600      	movs	r6, #0
 80007fc:	42a6      	cmp	r6, r4
 80007fe:	d109      	bne.n	8000814 <__libc_init_array+0x24>
 8000800:	4d0b      	ldr	r5, [pc, #44]	; (8000830 <__libc_init_array+0x40>)
 8000802:	4c0c      	ldr	r4, [pc, #48]	; (8000834 <__libc_init_array+0x44>)
 8000804:	f000 f818 	bl	8000838 <_init>
 8000808:	1b64      	subs	r4, r4, r5
 800080a:	10a4      	asrs	r4, r4, #2
 800080c:	2600      	movs	r6, #0
 800080e:	42a6      	cmp	r6, r4
 8000810:	d105      	bne.n	800081e <__libc_init_array+0x2e>
 8000812:	bd70      	pop	{r4, r5, r6, pc}
 8000814:	f855 3b04 	ldr.w	r3, [r5], #4
 8000818:	4798      	blx	r3
 800081a:	3601      	adds	r6, #1
 800081c:	e7ee      	b.n	80007fc <__libc_init_array+0xc>
 800081e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000822:	4798      	blx	r3
 8000824:	3601      	adds	r6, #1
 8000826:	e7f2      	b.n	800080e <__libc_init_array+0x1e>
 8000828:	08000850 	.word	0x08000850
 800082c:	08000850 	.word	0x08000850
 8000830:	08000850 	.word	0x08000850
 8000834:	08000854 	.word	0x08000854

08000838 <_init>:
 8000838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800083a:	bf00      	nop
 800083c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800083e:	bc08      	pop	{r3}
 8000840:	469e      	mov	lr, r3
 8000842:	4770      	bx	lr

08000844 <_fini>:
 8000844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000846:	bf00      	nop
 8000848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800084a:	bc08      	pop	{r3}
 800084c:	469e      	mov	lr, r3
 800084e:	4770      	bx	lr
