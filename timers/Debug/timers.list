
timers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000314  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004a8  080004a8  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004a8  080004a8  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  080004a8  080004a8  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004a8  080004a8  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004a8  080004a8  000104a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080004ac  080004ac  000104ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  080004b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020008  2**0
                  CONTENTS
 10 .bss          0000003c  20000008  20000008  00020008  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000044  20000044  00020008  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000018a  00000000  00000000  0002007b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000000b7  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000050  00000000  00000000  000202c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000033  00000000  00000000  00020310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00000f5e  00000000  00000000  00020343  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00000506  00000000  00000000  000212a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00003bdb  00000000  00000000  000217a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000080  00000000  00000000  00025384  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005d  00000000  00000000  00025404  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000008 	.word	0x20000008
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000490 	.word	0x08000490

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000000c 	.word	0x2000000c
 80001d0:	08000490 	.word	0x08000490

080001d4 <main>:
void setbit(unsigned  int *val,unsigned int pos);



int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0

	clk2=(unsigned int *)GPIO_clock;
 80001d8:	4b6e      	ldr	r3, [pc, #440]	; (8000394 <main+0x1c0>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	461a      	mov	r2, r3
 80001de:	4b6e      	ldr	r3, [pc, #440]	; (8000398 <main+0x1c4>)
 80001e0:	601a      	str	r2, [r3, #0]
	setbit(clk2,17);
 80001e2:	4b6d      	ldr	r3, [pc, #436]	; (8000398 <main+0x1c4>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	2111      	movs	r1, #17
 80001e8:	4618      	mov	r0, r3
 80001ea:	f000 f8ef 	bl	80003cc <setbit>
	setbit(clk2,21);
 80001ee:	4b6a      	ldr	r3, [pc, #424]	; (8000398 <main+0x1c4>)
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	2115      	movs	r1, #21
 80001f4:	4618      	mov	r0, r3
 80001f6:	f000 f8e9 	bl	80003cc <setbit>
	clk2=(unsigned int *)0x4002101c;
 80001fa:	4b67      	ldr	r3, [pc, #412]	; (8000398 <main+0x1c4>)
 80001fc:	4a67      	ldr	r2, [pc, #412]	; (800039c <main+0x1c8>)
 80001fe:	601a      	str	r2, [r3, #0]
	setbit(clk2,4);
 8000200:	4b65      	ldr	r3, [pc, #404]	; (8000398 <main+0x1c4>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	2104      	movs	r1, #4
 8000206:	4618      	mov	r0, r3
 8000208:	f000 f8e0 	bl	80003cc <setbit>
	ptr=(unsigned int)0x48001000;
 800020c:	4b64      	ldr	r3, [pc, #400]	; (80003a0 <main+0x1cc>)
 800020e:	4a65      	ldr	r2, [pc, #404]	; (80003a4 <main+0x1d0>)
 8000210:	601a      	str	r2, [r3, #0]
	setbit(ptr,26);
 8000212:	4b63      	ldr	r3, [pc, #396]	; (80003a0 <main+0x1cc>)
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	211a      	movs	r1, #26
 8000218:	4618      	mov	r0, r3
 800021a:	f000 f8d7 	bl	80003cc <setbit>
	*ptr=*ptr & ~(1<<31);
 800021e:	4b60      	ldr	r3, [pc, #384]	; (80003a0 <main+0x1cc>)
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	681a      	ldr	r2, [r3, #0]
 8000224:	4b5e      	ldr	r3, [pc, #376]	; (80003a0 <main+0x1cc>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800022c:	601a      	str	r2, [r3, #0]
	ptr=(unsigned int )ptr+0x14;
 800022e:	4b5c      	ldr	r3, [pc, #368]	; (80003a0 <main+0x1cc>)
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	3314      	adds	r3, #20
 8000234:	461a      	mov	r2, r3
 8000236:	4b5a      	ldr	r3, [pc, #360]	; (80003a0 <main+0x1cc>)
 8000238:	601a      	str	r2, [r3, #0]
	timer_add=(int *)0x40001000;
 800023a:	4b5b      	ldr	r3, [pc, #364]	; (80003a8 <main+0x1d4>)
 800023c:	4a5b      	ldr	r2, [pc, #364]	; (80003ac <main+0x1d8>)
 800023e:	601a      	str	r2, [r3, #0]
	setbit(timer_add,7);
 8000240:	4b59      	ldr	r3, [pc, #356]	; (80003a8 <main+0x1d4>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	2107      	movs	r1, #7
 8000246:	4618      	mov	r0, r3
 8000248:	f000 f8c0 	bl	80003cc <setbit>
	newadd=(unsigned int )timer_add+0x28;
 800024c:	4b56      	ldr	r3, [pc, #344]	; (80003a8 <main+0x1d4>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	3328      	adds	r3, #40	; 0x28
 8000252:	461a      	mov	r2, r3
 8000254:	4b56      	ldr	r3, [pc, #344]	; (80003b0 <main+0x1dc>)
 8000256:	601a      	str	r2, [r3, #0]
    *newadd = 0;
 8000258:	4b55      	ldr	r3, [pc, #340]	; (80003b0 <main+0x1dc>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	2200      	movs	r2, #0
 800025e:	601a      	str	r2, [r3, #0]
    mul=(unsigned int)0x4000102C;
 8000260:	4b54      	ldr	r3, [pc, #336]	; (80003b4 <main+0x1e0>)
 8000262:	4a55      	ldr	r2, [pc, #340]	; (80003b8 <main+0x1e4>)
 8000264:	601a      	str	r2, [r3, #0]
    *mul = 100;
 8000266:	4b53      	ldr	r3, [pc, #332]	; (80003b4 <main+0x1e0>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	2264      	movs	r2, #100	; 0x64
 800026c:	601a      	str	r2, [r3, #0]
    flag=(unsigned int )timer_add+0x10;
 800026e:	4b4e      	ldr	r3, [pc, #312]	; (80003a8 <main+0x1d4>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	3310      	adds	r3, #16
 8000274:	461a      	mov	r2, r3
 8000276:	4b51      	ldr	r3, [pc, #324]	; (80003bc <main+0x1e8>)
 8000278:	601a      	str	r2, [r3, #0]
    setbit(timer_add,0);
 800027a:	4b4b      	ldr	r3, [pc, #300]	; (80003a8 <main+0x1d4>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	2100      	movs	r1, #0
 8000280:	4618      	mov	r0, r3
 8000282:	f000 f8a3 	bl	80003cc <setbit>
    pb=(int *)0x48000000;
 8000286:	4b4e      	ldr	r3, [pc, #312]	; (80003c0 <main+0x1ec>)
 8000288:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800028c:	601a      	str	r2, [r3, #0]
	*pb=*pb&~(1<<0);
 800028e:	4b4c      	ldr	r3, [pc, #304]	; (80003c0 <main+0x1ec>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	681a      	ldr	r2, [r3, #0]
 8000294:	4b4a      	ldr	r3, [pc, #296]	; (80003c0 <main+0x1ec>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	f022 0201 	bic.w	r2, r2, #1
 800029c:	601a      	str	r2, [r3, #0]
	*pb=*pb&~(1<<1);
 800029e:	4b48      	ldr	r3, [pc, #288]	; (80003c0 <main+0x1ec>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	681a      	ldr	r2, [r3, #0]
 80002a4:	4b46      	ldr	r3, [pc, #280]	; (80003c0 <main+0x1ec>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	f022 0202 	bic.w	r2, r2, #2
 80002ac:	601a      	str	r2, [r3, #0]
	pb=(int)pb +0x04;
 80002ae:	4b44      	ldr	r3, [pc, #272]	; (80003c0 <main+0x1ec>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	3304      	adds	r3, #4
 80002b4:	461a      	mov	r2, r3
 80002b6:	4b42      	ldr	r3, [pc, #264]	; (80003c0 <main+0x1ec>)
 80002b8:	601a      	str	r2, [r3, #0]
	pb=(int *)0x48000000;
 80002ba:	4b41      	ldr	r3, [pc, #260]	; (80003c0 <main+0x1ec>)
 80002bc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002c0:	601a      	str	r2, [r3, #0]
	pb=(int )pb+0x10;
 80002c2:	4b3f      	ldr	r3, [pc, #252]	; (80003c0 <main+0x1ec>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	3310      	adds	r3, #16
 80002c8:	461a      	mov	r2, r3
 80002ca:	4b3d      	ldr	r3, [pc, #244]	; (80003c0 <main+0x1ec>)
 80002cc:	601a      	str	r2, [r3, #0]

    while(1)
    {
       for(i=0;i<1000;i++);
 80002ce:	4b3d      	ldr	r3, [pc, #244]	; (80003c4 <main+0x1f0>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	601a      	str	r2, [r3, #0]
 80002d4:	e004      	b.n	80002e0 <main+0x10c>
 80002d6:	4b3b      	ldr	r3, [pc, #236]	; (80003c4 <main+0x1f0>)
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	3301      	adds	r3, #1
 80002dc:	4a39      	ldr	r2, [pc, #228]	; (80003c4 <main+0x1f0>)
 80002de:	6013      	str	r3, [r2, #0]
 80002e0:	4b38      	ldr	r3, [pc, #224]	; (80003c4 <main+0x1f0>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80002e8:	d3f5      	bcc.n	80002d6 <main+0x102>
    	if(*pb&1==1)
 80002ea:	4b35      	ldr	r3, [pc, #212]	; (80003c0 <main+0x1ec>)
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	f003 0301 	and.w	r3, r3, #1
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d043      	beq.n	8000380 <main+0x1ac>
    	{



    	    *flag = *flag&~(1<<0);
 80002f8:	4b30      	ldr	r3, [pc, #192]	; (80003bc <main+0x1e8>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	681a      	ldr	r2, [r3, #0]
 80002fe:	4b2f      	ldr	r3, [pc, #188]	; (80003bc <main+0x1e8>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	f022 0201 	bic.w	r2, r2, #1
 8000306:	601a      	str	r2, [r3, #0]
    		*mul = 10+val;
 8000308:	4b2f      	ldr	r3, [pc, #188]	; (80003c8 <main+0x1f4>)
 800030a:	681a      	ldr	r2, [r3, #0]
 800030c:	4b29      	ldr	r3, [pc, #164]	; (80003b4 <main+0x1e0>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	320a      	adds	r2, #10
 8000312:	601a      	str	r2, [r3, #0]
    	    while((*flag & (1<<0)) ==0);
 8000314:	bf00      	nop
 8000316:	4b29      	ldr	r3, [pc, #164]	; (80003bc <main+0x1e8>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	f003 0301 	and.w	r3, r3, #1
 8000320:	2b00      	cmp	r3, #0
 8000322:	d0f8      	beq.n	8000316 <main+0x142>
    	    *ptr=*ptr&~(1<<13);
 8000324:	4b1e      	ldr	r3, [pc, #120]	; (80003a0 <main+0x1cc>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	681a      	ldr	r2, [r3, #0]
 800032a:	4b1d      	ldr	r3, [pc, #116]	; (80003a0 <main+0x1cc>)
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000332:	601a      	str	r2, [r3, #0]

			*flag = *flag&~(1<<0);
 8000334:	4b21      	ldr	r3, [pc, #132]	; (80003bc <main+0x1e8>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	681a      	ldr	r2, [r3, #0]
 800033a:	4b20      	ldr	r3, [pc, #128]	; (80003bc <main+0x1e8>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	f022 0201 	bic.w	r2, r2, #1
 8000342:	601a      	str	r2, [r3, #0]
			*mul=990-val;
 8000344:	4b20      	ldr	r3, [pc, #128]	; (80003c8 <main+0x1f4>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	4a1a      	ldr	r2, [pc, #104]	; (80003b4 <main+0x1e0>)
 800034a:	6812      	ldr	r2, [r2, #0]
 800034c:	f5c3 7377 	rsb	r3, r3, #988	; 0x3dc
 8000350:	3302      	adds	r3, #2
 8000352:	6013      	str	r3, [r2, #0]
			while((*flag & (1<<0)) ==0);
 8000354:	bf00      	nop
 8000356:	4b19      	ldr	r3, [pc, #100]	; (80003bc <main+0x1e8>)
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	f003 0301 	and.w	r3, r3, #1
 8000360:	2b00      	cmp	r3, #0
 8000362:	d0f8      	beq.n	8000356 <main+0x182>

			*ptr =*ptr|(1<<13);
 8000364:	4b0e      	ldr	r3, [pc, #56]	; (80003a0 <main+0x1cc>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	681a      	ldr	r2, [r3, #0]
 800036a:	4b0d      	ldr	r3, [pc, #52]	; (80003a0 <main+0x1cc>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000372:	601a      	str	r2, [r3, #0]
			val=val+100;
 8000374:	4b14      	ldr	r3, [pc, #80]	; (80003c8 <main+0x1f4>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	3364      	adds	r3, #100	; 0x64
 800037a:	4a13      	ldr	r2, [pc, #76]	; (80003c8 <main+0x1f4>)
 800037c:	6013      	str	r3, [r2, #0]
 800037e:	e7a6      	b.n	80002ce <main+0xfa>
    	}
    	else
    	{
    		*ptr=*ptr&~(1<<13);
 8000380:	4b07      	ldr	r3, [pc, #28]	; (80003a0 <main+0x1cc>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	681a      	ldr	r2, [r3, #0]
 8000386:	4b06      	ldr	r3, [pc, #24]	; (80003a0 <main+0x1cc>)
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800038e:	601a      	str	r2, [r3, #0]
       for(i=0;i<1000;i++);
 8000390:	e79d      	b.n	80002ce <main+0xfa>
 8000392:	bf00      	nop
 8000394:	20000000 	.word	0x20000000
 8000398:	2000002c 	.word	0x2000002c
 800039c:	4002101c 	.word	0x4002101c
 80003a0:	20000028 	.word	0x20000028
 80003a4:	48001000 	.word	0x48001000
 80003a8:	20000030 	.word	0x20000030
 80003ac:	40001000 	.word	0x40001000
 80003b0:	20000024 	.word	0x20000024
 80003b4:	20000034 	.word	0x20000034
 80003b8:	4000102c 	.word	0x4000102c
 80003bc:	20000038 	.word	0x20000038
 80003c0:	2000003c 	.word	0x2000003c
 80003c4:	20000040 	.word	0x20000040
 80003c8:	20000004 	.word	0x20000004

080003cc <setbit>:

    }

}
void setbit(unsigned  int *val,unsigned int pos)
{
 80003cc:	b480      	push	{r7}
 80003ce:	b083      	sub	sp, #12
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
 80003d4:	6039      	str	r1, [r7, #0]
	*val=*val|(1<<pos);
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	2101      	movs	r1, #1
 80003dc:	683a      	ldr	r2, [r7, #0]
 80003de:	fa01 f202 	lsl.w	r2, r1, r2
 80003e2:	431a      	orrs	r2, r3
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	601a      	str	r2, [r3, #0]
}
 80003e8:	bf00      	nop
 80003ea:	370c      	adds	r7, #12
 80003ec:	46bd      	mov	sp, r7
 80003ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f2:	4770      	bx	lr

080003f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003f4:	480d      	ldr	r0, [pc, #52]	; (800042c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003f6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003f8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003fc:	480c      	ldr	r0, [pc, #48]	; (8000430 <LoopForever+0x6>)
  ldr r1, =_edata
 80003fe:	490d      	ldr	r1, [pc, #52]	; (8000434 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000400:	4a0d      	ldr	r2, [pc, #52]	; (8000438 <LoopForever+0xe>)
  movs r3, #0
 8000402:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000404:	e002      	b.n	800040c <LoopCopyDataInit>

08000406 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000406:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000408:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800040a:	3304      	adds	r3, #4

0800040c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800040c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800040e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000410:	d3f9      	bcc.n	8000406 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000412:	4a0a      	ldr	r2, [pc, #40]	; (800043c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000414:	4c0a      	ldr	r4, [pc, #40]	; (8000440 <LoopForever+0x16>)
  movs r3, #0
 8000416:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000418:	e001      	b.n	800041e <LoopFillZerobss>

0800041a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800041a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800041c:	3204      	adds	r2, #4

0800041e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800041e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000420:	d3fb      	bcc.n	800041a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000422:	f000 f811 	bl	8000448 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000426:	f7ff fed5 	bl	80001d4 <main>

0800042a <LoopForever>:

LoopForever:
  b LoopForever
 800042a:	e7fe      	b.n	800042a <LoopForever>
  ldr   r0, =_estack
 800042c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000430:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000434:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 8000438:	080004b0 	.word	0x080004b0
  ldr r2, =_sbss
 800043c:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 8000440:	20000044 	.word	0x20000044

08000444 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000444:	e7fe      	b.n	8000444 <ADC1_2_IRQHandler>
	...

08000448 <__libc_init_array>:
 8000448:	b570      	push	{r4, r5, r6, lr}
 800044a:	4d0d      	ldr	r5, [pc, #52]	; (8000480 <__libc_init_array+0x38>)
 800044c:	4c0d      	ldr	r4, [pc, #52]	; (8000484 <__libc_init_array+0x3c>)
 800044e:	1b64      	subs	r4, r4, r5
 8000450:	10a4      	asrs	r4, r4, #2
 8000452:	2600      	movs	r6, #0
 8000454:	42a6      	cmp	r6, r4
 8000456:	d109      	bne.n	800046c <__libc_init_array+0x24>
 8000458:	4d0b      	ldr	r5, [pc, #44]	; (8000488 <__libc_init_array+0x40>)
 800045a:	4c0c      	ldr	r4, [pc, #48]	; (800048c <__libc_init_array+0x44>)
 800045c:	f000 f818 	bl	8000490 <_init>
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	10a4      	asrs	r4, r4, #2
 8000464:	2600      	movs	r6, #0
 8000466:	42a6      	cmp	r6, r4
 8000468:	d105      	bne.n	8000476 <__libc_init_array+0x2e>
 800046a:	bd70      	pop	{r4, r5, r6, pc}
 800046c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000470:	4798      	blx	r3
 8000472:	3601      	adds	r6, #1
 8000474:	e7ee      	b.n	8000454 <__libc_init_array+0xc>
 8000476:	f855 3b04 	ldr.w	r3, [r5], #4
 800047a:	4798      	blx	r3
 800047c:	3601      	adds	r6, #1
 800047e:	e7f2      	b.n	8000466 <__libc_init_array+0x1e>
 8000480:	080004a8 	.word	0x080004a8
 8000484:	080004a8 	.word	0x080004a8
 8000488:	080004a8 	.word	0x080004a8
 800048c:	080004ac 	.word	0x080004ac

08000490 <_init>:
 8000490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000492:	bf00      	nop
 8000494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000496:	bc08      	pop	{r3}
 8000498:	469e      	mov	lr, r3
 800049a:	4770      	bx	lr

0800049c <_fini>:
 800049c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800049e:	bf00      	nop
 80004a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004a2:	bc08      	pop	{r3}
 80004a4:	469e      	mov	lr, r3
 80004a6:	4770      	bx	lr
