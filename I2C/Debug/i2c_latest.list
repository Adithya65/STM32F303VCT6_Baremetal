
i2c_latest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000710  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080008a4  080008ac  000108ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080008a4  080008a4  000108ac  2**0
                  CONTENTS
  4 .ARM          00000000  080008a4  080008a4  000108ac  2**0
                  CONTENTS
  5 .preinit_array 00000000  080008a4  080008ac  000108ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080008a4  080008a4  000108a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080008a8  080008a8  000108a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000108ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000108ac  2**0
                  CONTENTS
 10 .bss          00000050  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000050  20000050  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000108ac  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000108dc  2**0
                  CONTENTS, READONLY
 14 .debug_info   00000367  00000000  00000000  0001091f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000170  00000000  00000000  00010c86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000078  00000000  00000000  00010df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000004c  00000000  00000000  00010e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00000fd5  00000000  00000000  00010ebc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000009bf  00000000  00000000  00011e91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00003c84  00000000  00000000  00012850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000000e0  00000000  00000000  000164d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  000165b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800088c 	.word	0x0800088c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	0800088c 	.word	0x0800088c

080001d4 <setbit>:
 */

#include "SC.h"
#include "stdint.h"
void setbit(uint32_t *val,uint32_t pos)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
 80001dc:	6039      	str	r1, [r7, #0]
	*val=*val|(1<<pos);
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	2101      	movs	r1, #1
 80001e4:	683a      	ldr	r2, [r7, #0]
 80001e6:	fa01 f202 	lsl.w	r2, r1, r2
 80001ea:	431a      	orrs	r2, r3
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	601a      	str	r2, [r3, #0]

}
 80001f0:	bf00      	nop
 80001f2:	370c      	adds	r7, #12
 80001f4:	46bd      	mov	sp, r7
 80001f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fa:	4770      	bx	lr

080001fc <clearbit>:
void clearbit(uint32_t *val,uint32_t pos)
{
 80001fc:	b480      	push	{r7}
 80001fe:	b083      	sub	sp, #12
 8000200:	af00      	add	r7, sp, #0
 8000202:	6078      	str	r0, [r7, #4]
 8000204:	6039      	str	r1, [r7, #0]
	*val=*val&~(1<<pos);
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	2101      	movs	r1, #1
 800020c:	683a      	ldr	r2, [r7, #0]
 800020e:	fa01 f202 	lsl.w	r2, r1, r2
 8000212:	43d2      	mvns	r2, r2
 8000214:	401a      	ands	r2, r3
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	601a      	str	r2, [r3, #0]

}
 800021a:	bf00      	nop
 800021c:	370c      	adds	r7, #12
 800021e:	46bd      	mov	sp, r7
 8000220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000224:	4770      	bx	lr
	...

08000228 <main>:

uint8_t *I2C_RXDR;

int main(void)

{
 8000228:	b580      	push	{r7, lr}
 800022a:	af00      	add	r7, sp, #0

	RCC_AHBENR=(uint32_t*)0x40021014;
 800022c:	4ba6      	ldr	r3, [pc, #664]	; (80004c8 <main+0x2a0>)
 800022e:	4aa7      	ldr	r2, [pc, #668]	; (80004cc <main+0x2a4>)
 8000230:	601a      	str	r2, [r3, #0]

	GPIO_MODER=(uint32_t*)0x48000400;
 8000232:	4ba7      	ldr	r3, [pc, #668]	; (80004d0 <main+0x2a8>)
 8000234:	4aa7      	ldr	r2, [pc, #668]	; (80004d4 <main+0x2ac>)
 8000236:	601a      	str	r2, [r3, #0]

	GPIO_AFRL=(uint32_t*)0x48000420;
 8000238:	4ba7      	ldr	r3, [pc, #668]	; (80004d8 <main+0x2b0>)
 800023a:	4aa8      	ldr	r2, [pc, #672]	; (80004dc <main+0x2b4>)
 800023c:	601a      	str	r2, [r3, #0]

	APB1ENR=(uint32_t*)0x4002101c;
 800023e:	4ba8      	ldr	r3, [pc, #672]	; (80004e0 <main+0x2b8>)
 8000240:	4aa8      	ldr	r2, [pc, #672]	; (80004e4 <main+0x2bc>)
 8000242:	601a      	str	r2, [r3, #0]

	I2C_CR1=(uint32_t*)0x40005400;
 8000244:	4ba8      	ldr	r3, [pc, #672]	; (80004e8 <main+0x2c0>)
 8000246:	4aa9      	ldr	r2, [pc, #676]	; (80004ec <main+0x2c4>)
 8000248:	601a      	str	r2, [r3, #0]

	I2C_CR2=(uint32_t*)	0x40005404;
 800024a:	4ba9      	ldr	r3, [pc, #676]	; (80004f0 <main+0x2c8>)
 800024c:	4aa9      	ldr	r2, [pc, #676]	; (80004f4 <main+0x2cc>)
 800024e:	601a      	str	r2, [r3, #0]

	I2C_TIMINGR=(uint32_t*)0x40005410;
 8000250:	4ba9      	ldr	r3, [pc, #676]	; (80004f8 <main+0x2d0>)
 8000252:	4aaa      	ldr	r2, [pc, #680]	; (80004fc <main+0x2d4>)
 8000254:	601a      	str	r2, [r3, #0]

	I2C_ISR=(uint32_t*)0x40005418;
 8000256:	4baa      	ldr	r3, [pc, #680]	; (8000500 <main+0x2d8>)
 8000258:	4aaa      	ldr	r2, [pc, #680]	; (8000504 <main+0x2dc>)
 800025a:	601a      	str	r2, [r3, #0]

	I2C_TXD=(uint32_t*)0x40005428;
 800025c:	4baa      	ldr	r3, [pc, #680]	; (8000508 <main+0x2e0>)
 800025e:	4aab      	ldr	r2, [pc, #684]	; (800050c <main+0x2e4>)
 8000260:	601a      	str	r2, [r3, #0]

	I2C_RXDR =(uint8_t*)0x40005424;
 8000262:	4bab      	ldr	r3, [pc, #684]	; (8000510 <main+0x2e8>)
 8000264:	4aab      	ldr	r2, [pc, #684]	; (8000514 <main+0x2ec>)
 8000266:	601a      	str	r2, [r3, #0]

	CLICK_CFG_A=(uint32_t*)0x38;
 8000268:	4bab      	ldr	r3, [pc, #684]	; (8000518 <main+0x2f0>)
 800026a:	2238      	movs	r2, #56	; 0x38
 800026c:	601a      	str	r2, [r3, #0]





	setbit(APB1ENR,21);
 800026e:	4b9c      	ldr	r3, [pc, #624]	; (80004e0 <main+0x2b8>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	2115      	movs	r1, #21
 8000274:	4618      	mov	r0, r3
 8000276:	f7ff ffad 	bl	80001d4 <setbit>

	setbit(RCC_AHBENR,18);
 800027a:	4b93      	ldr	r3, [pc, #588]	; (80004c8 <main+0x2a0>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	2112      	movs	r1, #18
 8000280:	4618      	mov	r0, r3
 8000282:	f7ff ffa7 	bl	80001d4 <setbit>

	setbit(GPIO_MODER,13);
 8000286:	4b92      	ldr	r3, [pc, #584]	; (80004d0 <main+0x2a8>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	210d      	movs	r1, #13
 800028c:	4618      	mov	r0, r3
 800028e:	f7ff ffa1 	bl	80001d4 <setbit>

	clearbit(GPIO_MODER,12);
 8000292:	4b8f      	ldr	r3, [pc, #572]	; (80004d0 <main+0x2a8>)
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	210c      	movs	r1, #12
 8000298:	4618      	mov	r0, r3
 800029a:	f7ff ffaf 	bl	80001fc <clearbit>

	setbit(GPIO_MODER,15);
 800029e:	4b8c      	ldr	r3, [pc, #560]	; (80004d0 <main+0x2a8>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	210f      	movs	r1, #15
 80002a4:	4618      	mov	r0, r3
 80002a6:	f7ff ff95 	bl	80001d4 <setbit>

	clearbit(GPIO_MODER,14);
 80002aa:	4b89      	ldr	r3, [pc, #548]	; (80004d0 <main+0x2a8>)
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	210e      	movs	r1, #14
 80002b0:	4618      	mov	r0, r3
 80002b2:	f7ff ffa3 	bl	80001fc <clearbit>

	setbit(GPIO_AFRL,26);
 80002b6:	4b88      	ldr	r3, [pc, #544]	; (80004d8 <main+0x2b0>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	211a      	movs	r1, #26
 80002bc:	4618      	mov	r0, r3
 80002be:	f7ff ff89 	bl	80001d4 <setbit>

	setbit(GPIO_AFRL,30);
 80002c2:	4b85      	ldr	r3, [pc, #532]	; (80004d8 <main+0x2b0>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	211e      	movs	r1, #30
 80002c8:	4618      	mov	r0, r3
 80002ca:	f7ff ff83 	bl	80001d4 <setbit>



	setbit(I2C_TIMINGR,0);
 80002ce:	4b8a      	ldr	r3, [pc, #552]	; (80004f8 <main+0x2d0>)
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	2100      	movs	r1, #0
 80002d4:	4618      	mov	r0, r3
 80002d6:	f7ff ff7d 	bl	80001d4 <setbit>

	setbit(I2C_TIMINGR,1);
 80002da:	4b87      	ldr	r3, [pc, #540]	; (80004f8 <main+0x2d0>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	2101      	movs	r1, #1
 80002e0:	4618      	mov	r0, r3
 80002e2:	f7ff ff77 	bl	80001d4 <setbit>

	setbit(I2C_TIMINGR,4);
 80002e6:	4b84      	ldr	r3, [pc, #528]	; (80004f8 <main+0x2d0>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	2104      	movs	r1, #4
 80002ec:	4618      	mov	r0, r3
 80002ee:	f7ff ff71 	bl	80001d4 <setbit>

	setbit(I2C_TIMINGR,8);
 80002f2:	4b81      	ldr	r3, [pc, #516]	; (80004f8 <main+0x2d0>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	2108      	movs	r1, #8
 80002f8:	4618      	mov	r0, r3
 80002fa:	f7ff ff6b 	bl	80001d4 <setbit>

	setbit(I2C_TIMINGR,9);
 80002fe:	4b7e      	ldr	r3, [pc, #504]	; (80004f8 <main+0x2d0>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	2109      	movs	r1, #9
 8000304:	4618      	mov	r0, r3
 8000306:	f7ff ff65 	bl	80001d4 <setbit>

	setbit(I2C_TIMINGR,10);
 800030a:	4b7b      	ldr	r3, [pc, #492]	; (80004f8 <main+0x2d0>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	210a      	movs	r1, #10
 8000310:	4618      	mov	r0, r3
 8000312:	f7ff ff5f 	bl	80001d4 <setbit>

	setbit(I2C_TIMINGR,11);
 8000316:	4b78      	ldr	r3, [pc, #480]	; (80004f8 <main+0x2d0>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	210b      	movs	r1, #11
 800031c:	4618      	mov	r0, r3
 800031e:	f7ff ff59 	bl	80001d4 <setbit>

	setbit(I2C_TIMINGR,17);
 8000322:	4b75      	ldr	r3, [pc, #468]	; (80004f8 <main+0x2d0>)
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	2111      	movs	r1, #17
 8000328:	4618      	mov	r0, r3
 800032a:	f7ff ff53 	bl	80001d4 <setbit>

	setbit(I2C_TIMINGR,22);
 800032e:	4b72      	ldr	r3, [pc, #456]	; (80004f8 <main+0x2d0>)
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	2116      	movs	r1, #22
 8000334:	4618      	mov	r0, r3
 8000336:	f7ff ff4d 	bl	80001d4 <setbit>

	setbit(I2C_TIMINGR,28);
 800033a:	4b6f      	ldr	r3, [pc, #444]	; (80004f8 <main+0x2d0>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	211c      	movs	r1, #28
 8000340:	4618      	mov	r0, r3
 8000342:	f7ff ff47 	bl	80001d4 <setbit>

	setbit(I2C_CR2,1);
 8000346:	4b6a      	ldr	r3, [pc, #424]	; (80004f0 <main+0x2c8>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	2101      	movs	r1, #1
 800034c:	4618      	mov	r0, r3
 800034e:	f7ff ff41 	bl	80001d4 <setbit>

	setbit(I2C_CR2,4);
 8000352:	4b67      	ldr	r3, [pc, #412]	; (80004f0 <main+0x2c8>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	2104      	movs	r1, #4
 8000358:	4618      	mov	r0, r3
 800035a:	f7ff ff3b 	bl	80001d4 <setbit>

	setbit(I2C_CR2,5);
 800035e:	4b64      	ldr	r3, [pc, #400]	; (80004f0 <main+0x2c8>)
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	2105      	movs	r1, #5
 8000364:	4618      	mov	r0, r3
 8000366:	f7ff ff35 	bl	80001d4 <setbit>

	setbit(I2C_CR2,13);
 800036a:	4b61      	ldr	r3, [pc, #388]	; (80004f0 <main+0x2c8>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	210d      	movs	r1, #13
 8000370:	4618      	mov	r0, r3
 8000372:	f7ff ff2f 	bl	80001d4 <setbit>

	setbit(I2C_CR1,0);
 8000376:	4b5c      	ldr	r3, [pc, #368]	; (80004e8 <main+0x2c0>)
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	2100      	movs	r1, #0
 800037c:	4618      	mov	r0, r3
 800037e:	f7ff ff29 	bl	80001d4 <setbit>



	//NBytes to 2

	clearbit(I2C_CR2,16);
 8000382:	4b5b      	ldr	r3, [pc, #364]	; (80004f0 <main+0x2c8>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	2110      	movs	r1, #16
 8000388:	4618      	mov	r0, r3
 800038a:	f7ff ff37 	bl	80001fc <clearbit>

	setbit(I2C_CR2,17);
 800038e:	4b58      	ldr	r3, [pc, #352]	; (80004f0 <main+0x2c8>)
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	2111      	movs	r1, #17
 8000394:	4618      	mov	r0, r3
 8000396:	f7ff ff1d 	bl	80001d4 <setbit>

		//setbit(I2C_TXD,4);

		//setbit(I2C_TXD,6);

		setbit(I2C_CR2,1);
 800039a:	4b55      	ldr	r3, [pc, #340]	; (80004f0 <main+0x2c8>)
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	2101      	movs	r1, #1
 80003a0:	4618      	mov	r0, r3
 80003a2:	f7ff ff17 	bl	80001d4 <setbit>

		setbit(I2C_CR2,4);
 80003a6:	4b52      	ldr	r3, [pc, #328]	; (80004f0 <main+0x2c8>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	2104      	movs	r1, #4
 80003ac:	4618      	mov	r0, r3
 80003ae:	f7ff ff11 	bl	80001d4 <setbit>

		setbit(I2C_CR2,5);
 80003b2:	4b4f      	ldr	r3, [pc, #316]	; (80004f0 <main+0x2c8>)
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	2105      	movs	r1, #5
 80003b8:	4618      	mov	r0, r3
 80003ba:	f7ff ff0b 	bl	80001d4 <setbit>



		setbit(I2C_CR2,13); //Start
 80003be:	4b4c      	ldr	r3, [pc, #304]	; (80004f0 <main+0x2c8>)
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	210d      	movs	r1, #13
 80003c4:	4618      	mov	r0, r3
 80003c6:	f7ff ff05 	bl	80001d4 <setbit>



		while((*I2C_CR2)& (1<<13) == 1); //Wait for Start To Complete
 80003ca:	bf00      	nop



		while((*I2C_ISR)& (1<<4) == 1); //Check for the NACK
 80003cc:	bf00      	nop



		//*I2C_TXD=0x28;

		*I2C_TXD=0x20;
 80003ce:	4b4e      	ldr	r3, [pc, #312]	; (8000508 <main+0x2e0>)
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	2220      	movs	r2, #32
 80003d4:	601a      	str	r2, [r3, #0]

		while((*I2C_ISR)& (1<<0) == 0); //Wait for Data Transfer to compltete
 80003d6:	bf00      	nop

		while((*I2C_ISR)& (1<<4) == 1); //Check for the NACK
 80003d8:	bf00      	nop



		*I2C_TXD=0x57;
 80003da:	4b4b      	ldr	r3, [pc, #300]	; (8000508 <main+0x2e0>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	2257      	movs	r2, #87	; 0x57
 80003e0:	601a      	str	r2, [r3, #0]

		while((*I2C_ISR)& (1<<0) == 0); //Wait for Data Transfer to compltete
 80003e2:	bf00      	nop

		while((*I2C_ISR)& (1<<4) == 1); //Check for the NACK
 80003e4:	bf00      	nop



		setbit(I2C_CR2,14);
 80003e6:	4b42      	ldr	r3, [pc, #264]	; (80004f0 <main+0x2c8>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	210e      	movs	r1, #14
 80003ec:	4618      	mov	r0, r3
 80003ee:	f7ff fef1 	bl	80001d4 <setbit>

		//Read X_L



		setbit(I2C_CR2,1);
 80003f2:	4b3f      	ldr	r3, [pc, #252]	; (80004f0 <main+0x2c8>)
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	2101      	movs	r1, #1
 80003f8:	4618      	mov	r0, r3
 80003fa:	f7ff feeb 	bl	80001d4 <setbit>

		setbit(I2C_CR2,4);
 80003fe:	4b3c      	ldr	r3, [pc, #240]	; (80004f0 <main+0x2c8>)
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	2104      	movs	r1, #4
 8000404:	4618      	mov	r0, r3
 8000406:	f7ff fee5 	bl	80001d4 <setbit>

		setbit(I2C_CR2,5);
 800040a:	4b39      	ldr	r3, [pc, #228]	; (80004f0 <main+0x2c8>)
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	2105      	movs	r1, #5
 8000410:	4618      	mov	r0, r3
 8000412:	f7ff fedf 	bl	80001d4 <setbit>



		clearbit(I2C_CR2,17);
 8000416:	4b36      	ldr	r3, [pc, #216]	; (80004f0 <main+0x2c8>)
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	2111      	movs	r1, #17
 800041c:	4618      	mov	r0, r3
 800041e:	f7ff feed 	bl	80001fc <clearbit>

		setbit(I2C_CR2,16);
 8000422:	4b33      	ldr	r3, [pc, #204]	; (80004f0 <main+0x2c8>)
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	2110      	movs	r1, #16
 8000428:	4618      	mov	r0, r3
 800042a:	f7ff fed3 	bl	80001d4 <setbit>



		setbit(I2C_CR2,13); //Start
 800042e:	4b30      	ldr	r3, [pc, #192]	; (80004f0 <main+0x2c8>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	210d      	movs	r1, #13
 8000434:	4618      	mov	r0, r3
 8000436:	f7ff fecd 	bl	80001d4 <setbit>





		while((*I2C_CR2)& (1<<13) == 1); //Wait for Start To Complete
 800043a:	bf00      	nop



		while((*I2C_ISR)& (1<<4) == 1); //Check for the NACK
 800043c:	bf00      	nop

		for(i=0;i<65534;i++);
 800043e:	4b37      	ldr	r3, [pc, #220]	; (800051c <main+0x2f4>)
 8000440:	2200      	movs	r2, #0
 8000442:	601a      	str	r2, [r3, #0]
 8000444:	e004      	b.n	8000450 <main+0x228>
 8000446:	4b35      	ldr	r3, [pc, #212]	; (800051c <main+0x2f4>)
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	3301      	adds	r3, #1
 800044c:	4a33      	ldr	r2, [pc, #204]	; (800051c <main+0x2f4>)
 800044e:	6013      	str	r3, [r2, #0]
 8000450:	4b32      	ldr	r3, [pc, #200]	; (800051c <main+0x2f4>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8000458:	4293      	cmp	r3, r2
 800045a:	ddf4      	ble.n	8000446 <main+0x21e>

						for(i=0;i<65534;i++);
 800045c:	4b2f      	ldr	r3, [pc, #188]	; (800051c <main+0x2f4>)
 800045e:	2200      	movs	r2, #0
 8000460:	601a      	str	r2, [r3, #0]
 8000462:	e004      	b.n	800046e <main+0x246>
 8000464:	4b2d      	ldr	r3, [pc, #180]	; (800051c <main+0x2f4>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	3301      	adds	r3, #1
 800046a:	4a2c      	ldr	r2, [pc, #176]	; (800051c <main+0x2f4>)
 800046c:	6013      	str	r3, [r2, #0]
 800046e:	4b2b      	ldr	r3, [pc, #172]	; (800051c <main+0x2f4>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8000476:	4293      	cmp	r3, r2
 8000478:	ddf4      	ble.n	8000464 <main+0x23c>

						for(i=0;i<65534;i++);
 800047a:	4b28      	ldr	r3, [pc, #160]	; (800051c <main+0x2f4>)
 800047c:	2200      	movs	r2, #0
 800047e:	601a      	str	r2, [r3, #0]
 8000480:	e004      	b.n	800048c <main+0x264>
 8000482:	4b26      	ldr	r3, [pc, #152]	; (800051c <main+0x2f4>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	3301      	adds	r3, #1
 8000488:	4a24      	ldr	r2, [pc, #144]	; (800051c <main+0x2f4>)
 800048a:	6013      	str	r3, [r2, #0]
 800048c:	4b23      	ldr	r3, [pc, #140]	; (800051c <main+0x2f4>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8000494:	4293      	cmp	r3, r2
 8000496:	ddf4      	ble.n	8000482 <main+0x25a>

		*I2C_TXD=0x28;
 8000498:	4b1b      	ldr	r3, [pc, #108]	; (8000508 <main+0x2e0>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	2228      	movs	r2, #40	; 0x28
 800049e:	601a      	str	r2, [r3, #0]
		for(i=0;i<65534;i++);
 80004a0:	4b1e      	ldr	r3, [pc, #120]	; (800051c <main+0x2f4>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	601a      	str	r2, [r3, #0]
 80004a6:	e004      	b.n	80004b2 <main+0x28a>
 80004a8:	4b1c      	ldr	r3, [pc, #112]	; (800051c <main+0x2f4>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	3301      	adds	r3, #1
 80004ae:	4a1b      	ldr	r2, [pc, #108]	; (800051c <main+0x2f4>)
 80004b0:	6013      	str	r3, [r2, #0]
 80004b2:	4b1a      	ldr	r3, [pc, #104]	; (800051c <main+0x2f4>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 80004ba:	4293      	cmp	r3, r2
 80004bc:	ddf4      	ble.n	80004a8 <main+0x280>

						for(i=0;i<65534;i++);
 80004be:	4b17      	ldr	r3, [pc, #92]	; (800051c <main+0x2f4>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	601a      	str	r2, [r3, #0]
 80004c4:	e031      	b.n	800052a <main+0x302>
 80004c6:	bf00      	nop
 80004c8:	2000001c 	.word	0x2000001c
 80004cc:	40021014 	.word	0x40021014
 80004d0:	20000020 	.word	0x20000020
 80004d4:	48000400 	.word	0x48000400
 80004d8:	20000024 	.word	0x20000024
 80004dc:	48000420 	.word	0x48000420
 80004e0:	20000028 	.word	0x20000028
 80004e4:	4002101c 	.word	0x4002101c
 80004e8:	2000002c 	.word	0x2000002c
 80004ec:	40005400 	.word	0x40005400
 80004f0:	20000030 	.word	0x20000030
 80004f4:	40005404 	.word	0x40005404
 80004f8:	20000034 	.word	0x20000034
 80004fc:	40005410 	.word	0x40005410
 8000500:	20000038 	.word	0x20000038
 8000504:	40005418 	.word	0x40005418
 8000508:	2000003c 	.word	0x2000003c
 800050c:	40005428 	.word	0x40005428
 8000510:	2000004c 	.word	0x2000004c
 8000514:	40005424 	.word	0x40005424
 8000518:	20000040 	.word	0x20000040
 800051c:	20000044 	.word	0x20000044
 8000520:	4b98      	ldr	r3, [pc, #608]	; (8000784 <main+0x55c>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	3301      	adds	r3, #1
 8000526:	4a97      	ldr	r2, [pc, #604]	; (8000784 <main+0x55c>)
 8000528:	6013      	str	r3, [r2, #0]
 800052a:	4b96      	ldr	r3, [pc, #600]	; (8000784 <main+0x55c>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8000532:	4293      	cmp	r3, r2
 8000534:	ddf4      	ble.n	8000520 <main+0x2f8>

						for(i=0;i<65534;i++);
 8000536:	4b93      	ldr	r3, [pc, #588]	; (8000784 <main+0x55c>)
 8000538:	2200      	movs	r2, #0
 800053a:	601a      	str	r2, [r3, #0]
 800053c:	e004      	b.n	8000548 <main+0x320>
 800053e:	4b91      	ldr	r3, [pc, #580]	; (8000784 <main+0x55c>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	3301      	adds	r3, #1
 8000544:	4a8f      	ldr	r2, [pc, #572]	; (8000784 <main+0x55c>)
 8000546:	6013      	str	r3, [r2, #0]
 8000548:	4b8e      	ldr	r3, [pc, #568]	; (8000784 <main+0x55c>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8000550:	4293      	cmp	r3, r2
 8000552:	ddf4      	ble.n	800053e <main+0x316>

		while((*I2C_ISR)& (1<<0) == 0); //Wait for Data Transfer to compltete
 8000554:	bf00      	nop

		while((*I2C_ISR)& (1<<4) == 1); //Check for the NACK
 8000556:	bf00      	nop



		setbit(I2C_CR2,10); //Set for Read
 8000558:	4b8b      	ldr	r3, [pc, #556]	; (8000788 <main+0x560>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	210a      	movs	r1, #10
 800055e:	4618      	mov	r0, r3
 8000560:	f7ff fe38 	bl	80001d4 <setbit>

		setbit(I2C_CR2,13); //Start
 8000564:	4b88      	ldr	r3, [pc, #544]	; (8000788 <main+0x560>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	210d      	movs	r1, #13
 800056a:	4618      	mov	r0, r3
 800056c:	f7ff fe32 	bl	80001d4 <setbit>

		while((*I2C_CR2)& (1<<13) == 1); //Wait for Start To Complete
 8000570:	bf00      	nop

		while((*I2C_ISR)& (1<<4) == 1); //Check for the NACK
 8000572:	bf00      	nop


		for(i=0;i<65534;i++);
 8000574:	4b83      	ldr	r3, [pc, #524]	; (8000784 <main+0x55c>)
 8000576:	2200      	movs	r2, #0
 8000578:	601a      	str	r2, [r3, #0]
 800057a:	e004      	b.n	8000586 <main+0x35e>
 800057c:	4b81      	ldr	r3, [pc, #516]	; (8000784 <main+0x55c>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	3301      	adds	r3, #1
 8000582:	4a80      	ldr	r2, [pc, #512]	; (8000784 <main+0x55c>)
 8000584:	6013      	str	r3, [r2, #0]
 8000586:	4b7f      	ldr	r3, [pc, #508]	; (8000784 <main+0x55c>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 800058e:	4293      	cmp	r3, r2
 8000590:	ddf4      	ble.n	800057c <main+0x354>
				for(i=0;i<65534;i++);
 8000592:	4b7c      	ldr	r3, [pc, #496]	; (8000784 <main+0x55c>)
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	e004      	b.n	80005a4 <main+0x37c>
 800059a:	4b7a      	ldr	r3, [pc, #488]	; (8000784 <main+0x55c>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	3301      	adds	r3, #1
 80005a0:	4a78      	ldr	r2, [pc, #480]	; (8000784 <main+0x55c>)
 80005a2:	6013      	str	r3, [r2, #0]
 80005a4:	4b77      	ldr	r3, [pc, #476]	; (8000784 <main+0x55c>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 80005ac:	4293      	cmp	r3, r2
 80005ae:	ddf4      	ble.n	800059a <main+0x372>
				for(i=0;i<65534;i++);
 80005b0:	4b74      	ldr	r3, [pc, #464]	; (8000784 <main+0x55c>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	601a      	str	r2, [r3, #0]
 80005b6:	e004      	b.n	80005c2 <main+0x39a>
 80005b8:	4b72      	ldr	r3, [pc, #456]	; (8000784 <main+0x55c>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	3301      	adds	r3, #1
 80005be:	4a71      	ldr	r2, [pc, #452]	; (8000784 <main+0x55c>)
 80005c0:	6013      	str	r3, [r2, #0]
 80005c2:	4b70      	ldr	r3, [pc, #448]	; (8000784 <main+0x55c>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 80005ca:	4293      	cmp	r3, r2
 80005cc:	ddf4      	ble.n	80005b8 <main+0x390>
				for(i=0;i<65534;i++);
 80005ce:	4b6d      	ldr	r3, [pc, #436]	; (8000784 <main+0x55c>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	e004      	b.n	80005e0 <main+0x3b8>
 80005d6:	4b6b      	ldr	r3, [pc, #428]	; (8000784 <main+0x55c>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	3301      	adds	r3, #1
 80005dc:	4a69      	ldr	r2, [pc, #420]	; (8000784 <main+0x55c>)
 80005de:	6013      	str	r3, [r2, #0]
 80005e0:	4b68      	ldr	r3, [pc, #416]	; (8000784 <main+0x55c>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 80005e8:	4293      	cmp	r3, r2
 80005ea:	ddf4      	ble.n	80005d6 <main+0x3ae>
				for(i=0;i<65534;i++);
 80005ec:	4b65      	ldr	r3, [pc, #404]	; (8000784 <main+0x55c>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	e004      	b.n	80005fe <main+0x3d6>
 80005f4:	4b63      	ldr	r3, [pc, #396]	; (8000784 <main+0x55c>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	3301      	adds	r3, #1
 80005fa:	4a62      	ldr	r2, [pc, #392]	; (8000784 <main+0x55c>)
 80005fc:	6013      	str	r3, [r2, #0]
 80005fe:	4b61      	ldr	r3, [pc, #388]	; (8000784 <main+0x55c>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8000606:	4293      	cmp	r3, r2
 8000608:	ddf4      	ble.n	80005f4 <main+0x3cc>
				for(i=0;i<65534;i++);
 800060a:	4b5e      	ldr	r3, [pc, #376]	; (8000784 <main+0x55c>)
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	e004      	b.n	800061c <main+0x3f4>
 8000612:	4b5c      	ldr	r3, [pc, #368]	; (8000784 <main+0x55c>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	3301      	adds	r3, #1
 8000618:	4a5a      	ldr	r2, [pc, #360]	; (8000784 <main+0x55c>)
 800061a:	6013      	str	r3, [r2, #0]
 800061c:	4b59      	ldr	r3, [pc, #356]	; (8000784 <main+0x55c>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8000624:	4293      	cmp	r3, r2
 8000626:	ddf4      	ble.n	8000612 <main+0x3ea>

		RData = *I2C_RXDR;
 8000628:	4b58      	ldr	r3, [pc, #352]	; (800078c <main+0x564>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	b29a      	uxth	r2, r3
 8000630:	4b57      	ldr	r3, [pc, #348]	; (8000790 <main+0x568>)
 8000632:	801a      	strh	r2, [r3, #0]

		setbit(I2C_CR2,14);
 8000634:	4b54      	ldr	r3, [pc, #336]	; (8000788 <main+0x560>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	210e      	movs	r1, #14
 800063a:	4618      	mov	r0, r3
 800063c:	f7ff fdca 	bl	80001d4 <setbit>



		for(i=0;i<65534;i++);
 8000640:	4b50      	ldr	r3, [pc, #320]	; (8000784 <main+0x55c>)
 8000642:	2200      	movs	r2, #0
 8000644:	601a      	str	r2, [r3, #0]
 8000646:	e004      	b.n	8000652 <main+0x42a>
 8000648:	4b4e      	ldr	r3, [pc, #312]	; (8000784 <main+0x55c>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	3301      	adds	r3, #1
 800064e:	4a4d      	ldr	r2, [pc, #308]	; (8000784 <main+0x55c>)
 8000650:	6013      	str	r3, [r2, #0]
 8000652:	4b4c      	ldr	r3, [pc, #304]	; (8000784 <main+0x55c>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 800065a:	4293      	cmp	r3, r2
 800065c:	ddf4      	ble.n	8000648 <main+0x420>
		for(i=0;i<65534;i++);
 800065e:	4b49      	ldr	r3, [pc, #292]	; (8000784 <main+0x55c>)
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	e004      	b.n	8000670 <main+0x448>
 8000666:	4b47      	ldr	r3, [pc, #284]	; (8000784 <main+0x55c>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	3301      	adds	r3, #1
 800066c:	4a45      	ldr	r2, [pc, #276]	; (8000784 <main+0x55c>)
 800066e:	6013      	str	r3, [r2, #0]
 8000670:	4b44      	ldr	r3, [pc, #272]	; (8000784 <main+0x55c>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8000678:	4293      	cmp	r3, r2
 800067a:	ddf4      	ble.n	8000666 <main+0x43e>
		for(i=0;i<65534;i++);
 800067c:	4b41      	ldr	r3, [pc, #260]	; (8000784 <main+0x55c>)
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	e004      	b.n	800068e <main+0x466>
 8000684:	4b3f      	ldr	r3, [pc, #252]	; (8000784 <main+0x55c>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	3301      	adds	r3, #1
 800068a:	4a3e      	ldr	r2, [pc, #248]	; (8000784 <main+0x55c>)
 800068c:	6013      	str	r3, [r2, #0]
 800068e:	4b3d      	ldr	r3, [pc, #244]	; (8000784 <main+0x55c>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8000696:	4293      	cmp	r3, r2
 8000698:	ddf4      	ble.n	8000684 <main+0x45c>
		for(i=0;i<65534;i++);
 800069a:	4b3a      	ldr	r3, [pc, #232]	; (8000784 <main+0x55c>)
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	e004      	b.n	80006ac <main+0x484>
 80006a2:	4b38      	ldr	r3, [pc, #224]	; (8000784 <main+0x55c>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	3301      	adds	r3, #1
 80006a8:	4a36      	ldr	r2, [pc, #216]	; (8000784 <main+0x55c>)
 80006aa:	6013      	str	r3, [r2, #0]
 80006ac:	4b35      	ldr	r3, [pc, #212]	; (8000784 <main+0x55c>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 80006b4:	4293      	cmp	r3, r2
 80006b6:	ddf4      	ble.n	80006a2 <main+0x47a>
		for(i=0;i<65534;i++);
 80006b8:	4b32      	ldr	r3, [pc, #200]	; (8000784 <main+0x55c>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]
 80006be:	e004      	b.n	80006ca <main+0x4a2>
 80006c0:	4b30      	ldr	r3, [pc, #192]	; (8000784 <main+0x55c>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	3301      	adds	r3, #1
 80006c6:	4a2f      	ldr	r2, [pc, #188]	; (8000784 <main+0x55c>)
 80006c8:	6013      	str	r3, [r2, #0]
 80006ca:	4b2e      	ldr	r3, [pc, #184]	; (8000784 <main+0x55c>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 80006d2:	4293      	cmp	r3, r2
 80006d4:	ddf4      	ble.n	80006c0 <main+0x498>
		for(i=0;i<65534;i++);
 80006d6:	4b2b      	ldr	r3, [pc, #172]	; (8000784 <main+0x55c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	e004      	b.n	80006e8 <main+0x4c0>
 80006de:	4b29      	ldr	r3, [pc, #164]	; (8000784 <main+0x55c>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	3301      	adds	r3, #1
 80006e4:	4a27      	ldr	r2, [pc, #156]	; (8000784 <main+0x55c>)
 80006e6:	6013      	str	r3, [r2, #0]
 80006e8:	4b26      	ldr	r3, [pc, #152]	; (8000784 <main+0x55c>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 80006f0:	4293      	cmp	r3, r2
 80006f2:	ddf4      	ble.n	80006de <main+0x4b6>

		//Read X_H



		setbit(I2C_CR2,1);
 80006f4:	4b24      	ldr	r3, [pc, #144]	; (8000788 <main+0x560>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	2101      	movs	r1, #1
 80006fa:	4618      	mov	r0, r3
 80006fc:	f7ff fd6a 	bl	80001d4 <setbit>

		setbit(I2C_CR2,4);
 8000700:	4b21      	ldr	r3, [pc, #132]	; (8000788 <main+0x560>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	2104      	movs	r1, #4
 8000706:	4618      	mov	r0, r3
 8000708:	f7ff fd64 	bl	80001d4 <setbit>

		setbit(I2C_CR2,5);
 800070c:	4b1e      	ldr	r3, [pc, #120]	; (8000788 <main+0x560>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	2105      	movs	r1, #5
 8000712:	4618      	mov	r0, r3
 8000714:	f7ff fd5e 	bl	80001d4 <setbit>





		setbit(I2C_CR2,13); //Start
 8000718:	4b1b      	ldr	r3, [pc, #108]	; (8000788 <main+0x560>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	210d      	movs	r1, #13
 800071e:	4618      	mov	r0, r3
 8000720:	f7ff fd58 	bl	80001d4 <setbit>





		while((*I2C_CR2)& (1<<13) == 1); //Wait for Start To Complete
 8000724:	bf00      	nop



		while((*I2C_ISR)& (1<<4) == 1); //Check for the NACK
 8000726:	bf00      	nop



		*I2C_TXD=0x28;
 8000728:	4b1a      	ldr	r3, [pc, #104]	; (8000794 <main+0x56c>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	2228      	movs	r2, #40	; 0x28
 800072e:	601a      	str	r2, [r3, #0]

		while((*I2C_ISR)& (1<<0) == 0); //Wait for Data Transfer to compltete
 8000730:	bf00      	nop

		while((*I2C_ISR)& (1<<4) == 1); //Check for the NACK
 8000732:	bf00      	nop



		setbit(I2C_CR2,10); //Set for Read
 8000734:	4b14      	ldr	r3, [pc, #80]	; (8000788 <main+0x560>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	210a      	movs	r1, #10
 800073a:	4618      	mov	r0, r3
 800073c:	f7ff fd4a 	bl	80001d4 <setbit>

		setbit(I2C_CR2,13); //Start
 8000740:	4b11      	ldr	r3, [pc, #68]	; (8000788 <main+0x560>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	210d      	movs	r1, #13
 8000746:	4618      	mov	r0, r3
 8000748:	f7ff fd44 	bl	80001d4 <setbit>

		while((*I2C_CR2)& (1<<13) == 1); //Wait for Start To Complete
 800074c:	bf00      	nop

		while((*I2C_ISR)& (1<<4) == 1); //Check for the NACK
 800074e:	bf00      	nop



		RData = ((RData&0x00FF) | (*I2C_RXDR <<8));
 8000750:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <main+0x568>)
 8000752:	881b      	ldrh	r3, [r3, #0]
 8000754:	b21b      	sxth	r3, r3
 8000756:	b2db      	uxtb	r3, r3
 8000758:	b21a      	sxth	r2, r3
 800075a:	4b0c      	ldr	r3, [pc, #48]	; (800078c <main+0x564>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	021b      	lsls	r3, r3, #8
 8000762:	b21b      	sxth	r3, r3
 8000764:	4313      	orrs	r3, r2
 8000766:	b21b      	sxth	r3, r3
 8000768:	b29a      	uxth	r2, r3
 800076a:	4b09      	ldr	r3, [pc, #36]	; (8000790 <main+0x568>)
 800076c:	801a      	strh	r2, [r3, #0]



		setbit(I2C_CR2,14);
 800076e:	4b06      	ldr	r3, [pc, #24]	; (8000788 <main+0x560>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	210e      	movs	r1, #14
 8000774:	4618      	mov	r0, r3
 8000776:	f7ff fd2d 	bl	80001d4 <setbit>



		for(i=0;i<65534;i++);
 800077a:	4b02      	ldr	r3, [pc, #8]	; (8000784 <main+0x55c>)
 800077c:	2200      	movs	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	e00f      	b.n	80007a2 <main+0x57a>
 8000782:	bf00      	nop
 8000784:	20000044 	.word	0x20000044
 8000788:	20000030 	.word	0x20000030
 800078c:	2000004c 	.word	0x2000004c
 8000790:	20000048 	.word	0x20000048
 8000794:	2000003c 	.word	0x2000003c
 8000798:	4b14      	ldr	r3, [pc, #80]	; (80007ec <main+0x5c4>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	3301      	adds	r3, #1
 800079e:	4a13      	ldr	r2, [pc, #76]	; (80007ec <main+0x5c4>)
 80007a0:	6013      	str	r3, [r2, #0]
 80007a2:	4b12      	ldr	r3, [pc, #72]	; (80007ec <main+0x5c4>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 80007aa:	4293      	cmp	r3, r2
 80007ac:	ddf4      	ble.n	8000798 <main+0x570>

		for(i=0;i<65534;i++);
 80007ae:	4b0f      	ldr	r3, [pc, #60]	; (80007ec <main+0x5c4>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	e004      	b.n	80007c0 <main+0x598>
 80007b6:	4b0d      	ldr	r3, [pc, #52]	; (80007ec <main+0x5c4>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	3301      	adds	r3, #1
 80007bc:	4a0b      	ldr	r2, [pc, #44]	; (80007ec <main+0x5c4>)
 80007be:	6013      	str	r3, [r2, #0]
 80007c0:	4b0a      	ldr	r3, [pc, #40]	; (80007ec <main+0x5c4>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 80007c8:	4293      	cmp	r3, r2
 80007ca:	ddf4      	ble.n	80007b6 <main+0x58e>

		for(i=0;i<65534;i++);
 80007cc:	4b07      	ldr	r3, [pc, #28]	; (80007ec <main+0x5c4>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	e004      	b.n	80007de <main+0x5b6>
 80007d4:	4b05      	ldr	r3, [pc, #20]	; (80007ec <main+0x5c4>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	3301      	adds	r3, #1
 80007da:	4a04      	ldr	r2, [pc, #16]	; (80007ec <main+0x5c4>)
 80007dc:	6013      	str	r3, [r2, #0]
 80007de:	4b03      	ldr	r3, [pc, #12]	; (80007ec <main+0x5c4>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 80007e6:	4293      	cmp	r3, r2
 80007e8:	ddf4      	ble.n	80007d4 <main+0x5ac>
		setbit(I2C_CR2,1);
 80007ea:	e602      	b.n	80003f2 <main+0x1ca>
 80007ec:	20000044 	.word	0x20000044

080007f0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007f0:	480d      	ldr	r0, [pc, #52]	; (8000828 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007f2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80007f4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007f8:	480c      	ldr	r0, [pc, #48]	; (800082c <LoopForever+0x6>)
  ldr r1, =_edata
 80007fa:	490d      	ldr	r1, [pc, #52]	; (8000830 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007fc:	4a0d      	ldr	r2, [pc, #52]	; (8000834 <LoopForever+0xe>)
  movs r3, #0
 80007fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000800:	e002      	b.n	8000808 <LoopCopyDataInit>

08000802 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000802:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000804:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000806:	3304      	adds	r3, #4

08000808 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000808:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800080a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800080c:	d3f9      	bcc.n	8000802 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800080e:	4a0a      	ldr	r2, [pc, #40]	; (8000838 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000810:	4c0a      	ldr	r4, [pc, #40]	; (800083c <LoopForever+0x16>)
  movs r3, #0
 8000812:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000814:	e001      	b.n	800081a <LoopFillZerobss>

08000816 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000816:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000818:	3204      	adds	r2, #4

0800081a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800081a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800081c:	d3fb      	bcc.n	8000816 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800081e:	f000 f811 	bl	8000844 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000822:	f7ff fd01 	bl	8000228 <main>

08000826 <LoopForever>:

LoopForever:
  b LoopForever
 8000826:	e7fe      	b.n	8000826 <LoopForever>
  ldr   r0, =_estack
 8000828:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800082c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000830:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000834:	080008ac 	.word	0x080008ac
  ldr r2, =_sbss
 8000838:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800083c:	20000050 	.word	0x20000050

08000840 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000840:	e7fe      	b.n	8000840 <ADC1_2_IRQHandler>
	...

08000844 <__libc_init_array>:
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	4d0d      	ldr	r5, [pc, #52]	; (800087c <__libc_init_array+0x38>)
 8000848:	4c0d      	ldr	r4, [pc, #52]	; (8000880 <__libc_init_array+0x3c>)
 800084a:	1b64      	subs	r4, r4, r5
 800084c:	10a4      	asrs	r4, r4, #2
 800084e:	2600      	movs	r6, #0
 8000850:	42a6      	cmp	r6, r4
 8000852:	d109      	bne.n	8000868 <__libc_init_array+0x24>
 8000854:	4d0b      	ldr	r5, [pc, #44]	; (8000884 <__libc_init_array+0x40>)
 8000856:	4c0c      	ldr	r4, [pc, #48]	; (8000888 <__libc_init_array+0x44>)
 8000858:	f000 f818 	bl	800088c <_init>
 800085c:	1b64      	subs	r4, r4, r5
 800085e:	10a4      	asrs	r4, r4, #2
 8000860:	2600      	movs	r6, #0
 8000862:	42a6      	cmp	r6, r4
 8000864:	d105      	bne.n	8000872 <__libc_init_array+0x2e>
 8000866:	bd70      	pop	{r4, r5, r6, pc}
 8000868:	f855 3b04 	ldr.w	r3, [r5], #4
 800086c:	4798      	blx	r3
 800086e:	3601      	adds	r6, #1
 8000870:	e7ee      	b.n	8000850 <__libc_init_array+0xc>
 8000872:	f855 3b04 	ldr.w	r3, [r5], #4
 8000876:	4798      	blx	r3
 8000878:	3601      	adds	r6, #1
 800087a:	e7f2      	b.n	8000862 <__libc_init_array+0x1e>
 800087c:	080008a4 	.word	0x080008a4
 8000880:	080008a4 	.word	0x080008a4
 8000884:	080008a4 	.word	0x080008a4
 8000888:	080008a8 	.word	0x080008a8

0800088c <_init>:
 800088c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800088e:	bf00      	nop
 8000890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000892:	bc08      	pop	{r3}
 8000894:	469e      	mov	lr, r3
 8000896:	4770      	bx	lr

08000898 <_fini>:
 8000898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800089a:	bf00      	nop
 800089c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800089e:	bc08      	pop	{r3}
 80008a0:	469e      	mov	lr, r3
 80008a2:	4770      	bx	lr
